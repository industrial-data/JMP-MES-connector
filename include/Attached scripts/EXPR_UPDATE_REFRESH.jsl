/***********************************************************
 * General Information
 *
 * Script Title    : Update / Refresh
 *
 * Description:
 * This script contains the additional script "Update/Refresh".
 *
 ************************************************************/

/***********************************************************
 *                SCRIPT TABLE OF CONTENTS
 ************************************************************/

/****************************************************
 *  I. SETTINGS
 *  II. USER INTERFACE 
 *  III. UPDATE / REFRESH
 *  IV. FORMATTING TABLE OUTPUT 
 ****************************************************/



EXPR_UPDATE_REFRESH_UI = Expr(


/****************************************************
*  I. SETTINGS
******************************************************/


/* 1.1. Settings from initial data extraction */

	section = "UPDATE / REFRESH";
	dt = Current Data Table();
	strTableVisibility = Expr( strTableVisibility );
	strPath = Expr( strPath );
	dt << Maximize Window( 1 );
	WindowSize = dt << Get Window Size();
	// Screen dimensions
	DevX = 1536;
	DevY = 874;
	ScreenX = WindowSize[1];
	ScreenY = WindowSize[2];
	RatioX = ScreenX / DevX;
	RatioY = ScreenY / DevY;
	
	
/* 1.2. Source JSL dependencies */

	If( !(Directory Exists( strPath )),
		strPath = Get Path Variable( "ADDIN_HOME(MES.Data.Retrieval)" );
		If( Is Missing( strPath ),
			New Window( "Error",
				<<modal,
				<<Size( 300, 100 ),
				<<OnOpen( Window( "Error" ) << moveWindow( 800, 400 ) ),
				Text Box( "Please install the add-in MES Data Retrieval" ),
				Border Box( Top( 15 ), Left( 100 ), Button Box( "OK" ) )
			);
			Throw();
		);
	);

	// Config file
	Include( strPath || "config/config.jsl" );

	// Source dependencies files needed
	lstDependencies = Files In Directory( strPath || "include/", "recursive" );
	For( i = 1, i <= N Items( lstDependencies ), i++,
		Include( strPath || "include/" || lstDependencies[i] )
	);
	
	f_Log( "INFO", "Start Update / Refreshscript." );

		
/* 1.3. Server information */	
			
	MES = Expr( MES );
	SiteName = Expr( SiteName );
	ServerType = Expr( ServerType );
	NetworkNode = Expr( NetworkNode );
	ShortName = Expr( ShortName );
	is_checked = Expr( is_checked );
	ps_path = Expr( ps_path );
	ps_hard_code_version = Expr( ps_hard_code_version );
	SQL_OLEDB_PS = Expr( SQL_OLEDB_PS );

				
	f_Log(
		"INFO",
		"Server information - MES " || Char( MES ) || " / Server type " || Char( ServerType ) || " / SiteName " || Char( SiteName ) ||
		" / NetworkNode " || Char( NetworkNode ) || " / ShortName " || Char( ShortName )
	);
	
		
/* 1.4. Extraction information */	

	ExtractionMethod = Expr( ExtractionMethod );
	PeriodNumValue = Expr( PeriodNumValue );
	PeriodUnits = Expr( PeriodUnits );
	NewPeriodNumValue = Expr( NewPeriodNumValue );
	NewPeriodNumValue_s = Expr( NewPeriodNumValue_s );
	Request = Expr( Request );
	ValueIP21 = Expr( ValueIP21 );
	TableIP21 = Expr( TableIP21 );
	TablePI = Expr( TablePI );
	SQL_InterpolatedPI = Expr( SQL_InterpolatedPI );
	local_to_UTC_time_diff_in_s = Expr(
		local_to_UTC_time_diff_in_s
	);
	
	f_Log( "INFO", "Extraction details - Method " || Char( ExtractionMethod ) || " / Period " || Char( PeriodNumValue ) || Char( PeriodUnits ) );
	
	
	StartFormat = dt << Get Table Variable( "Start Time" );
	EndFormat = dt << Get Table Variable( "End Time" );
	If( Or( StartFormat == "", EndFormat == "" ),
		f_DialogError( "Missing table variable(s): Start/End Time" )
	);
	
	Start = Informat( StartFormat );
	End = Informat( EndFormat );
	Start_UTC = Start - local_to_UTC_time_diff_in_s;
	End_UTC = End - local_to_UTC_time_diff_in_s;
	
	If( ServerType == "IP21",
		{StartFormat, EndFormat} = f_FormatDates( Start_UTC, End_UTC, 1 ),
		{StartFormat, EndFormat} = f_FormatDates( Start, End, 0 )
	);
	
	f_Log( "INFO", "Start Date - " || Char( StartFormat ) || " / End Date - " || Char( EndFormat ) );
	
	n_estimated_rows = (End - Start) / NewPeriodNumValue_s;
	
	
	

/* 1.5. Tags */


	colNames = dt << Get Column Names( "String" );
		
	// Update TagSelect_AA
	TagSelect_AA = Associative Array();
	TagType_AA = Associative Array();
	ColTS = Associative Array();
	
	For( i = 1, i <= N Items( colNames ), i++,
		colName = colNames[i];
		// Get the real tagname
		tagname = Column( dt, colName ) << Get Property( "tagname" );
		// Get the  tagname with unit and description
		tagname_desc_unit = Column( dt, colName ) << Get Property( "tagname_desc_unit" );
		tagtype = Column( dt, colName ) << Get Property( "tagtype" );
		addin_col_name = Column( dt, colName ) << Get Property( "addin_colname" );
		
		// Empty if TS/TS_UTC columns
		If( tagname != Empty(),
			TagSelect_AA[tagname_desc_unit] = tagname
		);
		If( tagtype != Empty(),
			TagType_AA[tagname_desc_unit] = tagtype
		);
		
		If( addin_col_name == "TS",
			ColTS["TS"] = colName
		);
		
		If( addin_col_name == "TS_UTC",
			ColTS["TS_UTC"] = colName
		);
	);

/* 1.6. Filters */


	Old_Filters_AA = Expr( Filters_AA );
	Condition = Expr( Condition );
	strCondition = Match( Condition, "AND", "ALL", "OR", "ANY" );
	
	// Check Filter
	Filters_AA = f_CleanFiltersAA( Old_Filters_AA, TagSelect_AA );
	
	// Convert in list
	lstFilters = f_Convert2ListFilters( Filters_AA, Condition );
	OldlstFilters = lstFilters;
	
	


/****************************************************
*  II. USER INTERFACE
******************************************************/


/* 2.1. User interface */
	
	WinUpdate = New Window( "Update / Refresh ",
	Show Menu( 0 ),
		show toolbars( 0 ), 
		Border Box( Top( 20 ), Left( 15 ), Right( 15 ),
			V List Box(
				H List Box(
					outlinebox_parameters = Outline Box( "Frozen parameters",
						Border Box( Top( 10 ),
							tblbox_parameters = Table Box(
								String Col Box( "General", {"SERVER", "", "", "", "", "", "EXTRACTION", "", "", "", "TAG(S)"} ),
								String Col Box( "Parameter",
									{"Server", "Location", "Network node", "Name", "Server type", "", "Extraction method", "Period", "Unit", ""}
								),
								valuecolbox = String Col Box( "Value",
									{MES, SiteName, NetworkNode, ShortName, ServerType, "", ExtractionMethod, Char( PeriodNumValue ), PeriodUnits, ""
									}
								)
							
							)
						)
					),
					Outline Box( "Start/End time",
						Panel Box( "",
							Lineup Box( N Col( 3 ), spacing( 10 ),
								Text Box( "Method:" ),
								rdbox_method = Radio Box(
									{"Update", "Refresh"},
									meth = rdbox_method << Get();
									If( meth == 2,
										txt_start << Visibility( "Collapse" );
										StartTime << Visibility( "Collapse" );
										bttn_Round << Visibility( "Collapse" );
									,
										txt_start << Visibility( "Visible" );
										StartTime << Visibility( "Visible" );
										bttn_Round << Visibility( "Visible" );
									);
								),
								Text Box( "" ),
								txt_start = Text Box( "Start time:" ),
								StartTime = Number Edit Box( 0 ),
								bttn_Round = Button Box( "Round",
									Start = StartTime << get();
									NewStartTime = f_UpdateDate( Start, PeriodNumValue, PeriodUnits );
									StartTime << set( NewStartTime );
								),
								txt_end = Text Box( "End time:" ),
								EndTime = Number Edit Box( 0 ),
								bttn_Now = Button Box( "Now",
									NewendTime = f_UpdateDate( Today(), PeriodNumValue, PeriodUnits );
									EndTime << set( NewendTime );
								)
							)
						)
					),
					Outline Box( "Options",
						Panel Box( "",
							Lineup Ruler Box(
								Widths( {140 * RatioX, 150 * RatioY} ),
								Border Box( Left( 15 ), Right( 15 ),
									Lineup Box( N Col( 2 ), spacing( 15 ),
										Text Box( "Compute summary table:" ),
										OptSummarybox = Check Box( {""} ),
										Text Box( "Workflow:" ),
										bttnWorkflow = Button Box( "Select file",
											strWorkflowPath == "";
												 	// The user select the workflow path
											strWorkflowPath = Pick File( "Select Workflow File", "$DOCUMENTS", {"JMP Files|jmpflow"}, 1, 0 );
													
													// Get workflow name
											strWorkflowName = Word( -1, strWorkflowPath, "/" );
											If( strWorkflowPath != "",
												bttnWorkflow << Set Button Name( strWorkflowName ),
												bttnWorkflow << Set Button Name( "Select file" )
											);
										)
									)
								)
							)
						)
					)
				),
				Border Box( Top( 20 ),
					Outline Box( "If " || strCondition || " condition(s) are met",
						V List Box(
							H List Box(
								Border Box( Left( 15 ), Top( 15 ), lstFiltersRegistered = List Box( {}, <<Set Size( 1052 * RatioX, 200 * RatioY ) ) ),
								Border Box( Left( 40 ), Top( 60 ),
									H List Box(
										V List Box(
											Lineup Ruler Box(
												Widths( {120 * RatioX, 200 * RatioY} ),
												Lineup Box( N Col( 1 ),
													bttn_Update = Button Box( "      Update Filter      ",
														str.script_name = "Update/Refresh";
														f_button.update_filter;
													),
													Spacer Box( Size( 15, 15 ) ),
													bttn_RemoveFilter = Button Box( "   Remove    ", 
														//Log parameter
														section = "FILTER";

														Try( (lstFiltersRegistered << Get Selected)[1], f_DialogError( "No filter selected" ) );
														lst_FilterRemoved = lstFiltersRegistered << Get Selected;
														f_Log(
															"INFO", "User removed the filter - " || Concat Items( lst_FilterRemoved, " AND " ),
															section
														);
	
														// Remove from list of filters in UI
														ID_to_remove = lstFiltersRegistered << Get Selected Indices();
														lstFiltersRegistered << Remove Selected;
	
														// Remove from list of filters in algo
														Filters_AA = f_ReorderAssociativeArray( Filters_AA, ID_to_remove );
														lstFilters = f_Convert2ListFilters( Filters_AA, Condition );
											
	
														// Decrease NextID
														NextID = N Items( Filters_AA ) + 1;
														//Show( Filters_AA );
													),
													Spacer Box( Size( 15, 15 ) ),
													bttn_RemoveAllFilters = Button Box( " Remove all ",
														lstFiltersRegistered << Remove All;
														NextID = 1;
														Filters_AA = Associative Array();
														f_Log( "INFO", "User removed all filters", "FILTER" );
													)
												)
											)
										),
										Spacer Box( Size( 15, 15 ) ),
										V Center Box( bttn_Extraction = Button Box( "Run extraction", Eval( EXPR_UPDATE_REFRESH_EXTRACT ) ) )
									)
								)
							)
						)
					)// End Outine box Filters Registered
				)
			)
		)
	); // End WinUpdate
	
/* 2.2. Center Window */
	
	f_CenterWindow( WinUpdate, WindowSize );

	
/* 2.3. Custom settings */
	
	tblbox_parameters << Set Underline Headings( 1 );
	tblbox_parameters << Set Shade Headings( 0 );
	tblbox_parameters << Set Heading Column Borders( 0 );
	valuecolbox << Set width( 472 * RatioX );

	outlinebox_parameters << outlinecloseorientation( "Vertical" );
	
	bttn_Round << Underline Style( 1 );
	bttn_Now << Underline Style( 1 );
	bttn_Extraction << Set Icon( "DebuggerRunWithoutBreakpoints" );
	StartTime << set( End + NewPeriodNumValue_s );
	EndTime << set( Floor( Today() / NewPeriodNumValue_s ) * NewPeriodNumValue_s ); 
	// Set date format
	StartTime << Set Format( Format( "yyyy-mm-ddThh:mm:ss" ) );
	EndTime << Set Format( Format( "yyyy-mm-ddThh:mm:ss" ) );

	// Add tags in frozen paramters table
	For Each( {{key, value}, index}, TagSelect_AA, tblbox_parameters << Add Row( {1, "", key} ) );
	
	//Add filters
	lstFiltersRegistered << Append( lstFilters );

); //END EXPR_UPDATE_REFRESH_UI 



/****************************************************
*  III. UPDATE / REFRESH
******************************************************/

EXPR_UPDATE_REFRESH_EXTRACT = Expr(


/* 3.1. Get list of tags to extract */

	lstTags = TagSelect_AA << get values;
	NTags = N Items( lstTags );
	If( NTags == 0,
		f_DialogError( "No tags found" )
	);
	
	f_Log( "INFO", "START Update / Refresh script." );
	f_Log( "INFO", "List of tags to extract (Including new) - " || Concat Items( lstTags, " / " ) );
	

/* 3.2. Get method and start/end date */

	NewEnd = Informat( Format( EndTime << Get(), "yyyy-mm-ddThh:mm:ss" ) );
	meth = rdbox_method << Get Selected();
	If( meth == "Update",
		NewStart = Informat( Format( StartTime << Get(), "yyyy-mm-ddThh:mm:ss" ) );
		n_estimated_rows = (NewEnd - NewStart) / NewPeriodNumValue_s;
	,
		NewStart = Informat( Format( NewEnd - n_estimated_rows * NewPeriodNumValue_s, "yyyy-mm-ddThh:mm:ss" ) )
	);
	
	Limit = Match( ServerType, "IP21", NRow_limit_IP21, "PI", NRow_limit_PI );
	NewEnd = f_CheckDates( NewStart, NewEnd, NewPeriodNumValue_s, Limit, ServerType );
	{NewStartFormat, NewEndFormat} = f_FormatDates( NewStart, NewEnd, 0 );
	
	
	

/* 3.3. REFRESH */
			
	If( meth == "Refresh", 
	
		f_Log( "INFO", "START REFRESH Script", section );
		
		// Delete all rows
		dt << SelectRows( Index( 1, N Rows( dt ) ) );
		dt << DeleteRows();
		dt << Clear Select();
		
		
		
		f_Log( "INFO", "New Start date (yyyy-mm-ddThh:mm:ss) - " || NewStartFormat, "REFRESH" );
		f_Log( "INFO", "New End date (yyyy-mm-ddThh:mm:ss) - " || NewEndFormat, "REFRESH" );
		
		tblUpdatedTags = f_RunExtraction( lstTags, NewStartFormat, NewEndFormat, ServerType, Filters_AA );
		
		f_Log( "INFO", "END REFRESH Script", section );

	, 

/* 3.4. UPDATE */

		f_Log( "INFO", "START UPDATE Script", section );
		
		If(
			Or(
				And( NewStart > End + NewPeriodNumValue_s, NewEnd > End + NewPeriodNumValue_s ),
				And( NewStart < End - NewPeriodNumValue_s, NewEnd < End - NewPeriodNumValue_s )
			),
			win = New Window( "Warning",
				<<Modal,
				V List Box(
					Text Box(
						"There will be a discontinuity in time. Press OK to continue."
					),
					Spacer Box( 15, 15 ),
					H List Box( Border Box( Left( 80 ), Lineup Box( N Col( 2 ), Button Box( "OK" ), Button Box( "Cancel", Throw() ) ) ) )
				)
			);
		
		// Stop preview if the user clicks on "Cancel" button
			If( win["button"] == -1,
				Try(
					bttn_Extraction << Set Button Name( "Run extraction" );
					bttn_Extraction << enabled( 1 );
				);
				Throw();
			);
			
			// Update Property "Time Discontinuities" in TS_UTC cpmuùn
			PropertyDiscontinuity = Column( dt, ColTS["TS_UTC"] ) << Get Property( "Time Discontinuities" );
			If( And( NewStart > End + NewPeriodNumValue_s, NewEnd > End + NewPeriodNumValue_s ),
				NewDiscontinuity = "( Between " || Char( Format( End + NewPeriodNumValue_s, "yyyy-mm-ddThh:mm:ss" ) ) || " and " ||
				Char( Format( NewStart - NewPeriodNumValue_s, "yyyy-mm-ddThh:mm:ss" ) ) || " )",
				NewDiscontinuity = "( Between " || Char( Format( NewEnd + NewPeriodNumValue_s, "yyyy-mm-ddThh:mm:ss" ) ) || " and " ||
				Char( Format( Start - NewPeriodNumValue_s, "yyyy-mm-ddThh:mm:ss" ) ) || " )"
			
			);
			If( Is Empty( PropertyDiscontinuity ),
				PropertyDiscontinuity = NewDiscontinuity,
				PropertyDiscontinuity = PropertyDiscontinuity || " / " || NewDiscontinuity
			);
			Column( dt, ColTS["TS_UTC"] ) << Set Property( "Time Discontinuities", PropertyDiscontinuity );
			
		);
		
		
					
		NewEnd = f_CheckDates( NewStart, NewEnd, NewPeriodNumValue_s, Limit, ServerType );
		{NewStartFormat, NewEndFormat} = f_FormatDates( NewStart, NewEnd, 0 );
	
		f_Log( "INFO", "New Start date (yyyy-mm-ddThh:mm:ss) - " || NewStartFormat, "UPDATE" );
		f_Log( "INFO", "New End date (yyyy-mm-ddThh:mm:ss) - " || NewEndFormat, "UPDATE" );
	
	
		tblUpdatedTags = f_RunExtraction( lstTags, NewStartFormat, NewEndFormat, ServerType, Filters_AA );

		
		f_Log( "INFO", "END UPDATE Script", section );
		

	); // END If meth = "Refresh" 

	

/****************************************************
*  IV. FORMATTING OUTPUT TABLE
******************************************************/


/* 4.1. Remove attached scripts generated from JMP */

	script_names = tblUpdatedTags << get table script names;
	tblUpdatedTags << delete scripts( script_names );

				
/* 4.2. Concatenate new data to old data in tag table */


	f_Log( "INFO", "Concatenate old data with new data." );

	dt << Concatenate( tblUpdatedTags, "Append to first table" );
	// Order by TS column
	Eval( Eval Expr( dt << Sort( By( Expr( ColTS["TS_UTC"] ) ), Replace Table, Order( Ascending ) ) ) );
	Close( tblUpdatedTags, nosave );
	dt << Maximize window(); // Full screen

/* 4.3. Concatenate new data to old data in summary table */
	
	OptSummary = OptSummarybox << Get();
	
	If( OptSummary == 1,
		f_Log( "INFO", "Update  old summary table with new data." );
		// In case there is already a Summary Table 
		Try(
			tblSummary = Data Table( "Summary Table" );
			Close( tblSummary, no save );
		);
	
		Try(
			tblSummary = f_SummaryTAG( dt, ServerType );
			tblSummary << New data view();
		,
			f_DialogError( "An error occurred when creating the summary table. Please check the log (CTRL+Shift+L)" )
		);
	);
	
/* 4.5. Update table variables */

	f_Log( "INFO", "Update table variables." );
	
	// Start/End time
	If( And( NewStart <= Start, meth == "Update" ),
		dt << Set Table Variable( "Start Time", Format( NewStart, "yyyy-mm-ddThh:mm:ss" ) ) 
	
	);
	
	If( meth == "Refresh",
		dt << Set Table Variable( "Start Time", Format( NewStart, "yyyy-mm-ddThh:mm:ss" ) )
	);
	
	If( NewEnd >= End,
		dt << Set Table Variable( "End Time", Format( NewEnd, "yyyy-mm-ddThh:mm:ss" ) ) 
		
	);

	NewUpdateFilters = f_newElementsNotInOldList( OldlstFilters, lstFilters );
	
	// Add new updated filters if any
	
	If( N Items( NewUpdateFilters ) > 0,
		If( dt << Get Table Variable( "UPDATE" ) == "",
			dt << Set Table Variable( "UPDATE", " ---- " )
		);
		For Each( {filter, index}, NewUpdateFilters, 
		
			// Check if it does not already exist
			If( dt << Get Table Variable( Char( filter ) ) == "", 
				
				dt << Set Table Variable( Char( filter ), "." )
			)
		);
	);
	
	
	/* 5.6. Workflow */

	If( strWorkflowPath != "",
		Open( strWorkflowPath )
	);
	
	
	WinUpdate << Close Window();
			

); // End EXPR_UPDATE_REFRESH_EXTRACT
