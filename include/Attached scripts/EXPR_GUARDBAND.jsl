/***********************************************************
 * General Information
 *
 * Script Title    : Guardband
 *
 * Description:
 * This script contains the attached scrip run to generate the guardband chart (Additional script "Guardband").
 *
 ************************************************************/

/***********************************************************
 *                SCRIPT TABLE OF CONTENTS
 ************************************************************/

/****************************************************
 *  I. SETTINGS
 *  II. USER INTERFACE 
 *  III. DATA PRE-PROCESSING
 *  IV. GUARDBAND TABLE
 *  V. GUARDBAND CHART
 ****************************************************/
 
EXPR_GUARDBAND = Expr(


/****************************************************
*  I. SETTINGS
******************************************************/

/* 1.1. Settings from initial data extraction */
	
	Clear Log();
	dt = Current Data Table();
	dt << Maximize Window( 1 );
	WindowSize = dt << Get Window Size();
	MES = Expr( MES ); 
	section = "GUARDBAND";
	strTableVisibility = Expr( strTableVisibility );
	strPath = Expr( strPath );
	str.path4guardband_selected = "";
	Try( Close( tbl.guardband, NoSave ) ); 
	
	/* 1.2. Source JSL dependencies */
		
	If( !(Directory Exists( strPath )),
		strPath = Get Path Variable( "ADDIN_HOME(MES.Data.Retrieval)" );
		If( Is Missing( strPath ),
			New Window( "Error",
				<<modal,
				<<Size( 300, 100 ),
				<<OnOpen( Window( "Error" ) << moveWindow( 800, 400 ) ),
				Text Box( "Please install the add-in MES Data Retrieval" ),
				Border Box( Top( 15 ), Left( 100 ), Button Box( "OK" ) )
			);
			Throw();
		);
	); 

	// Config file
	Include( strPath || "config/config.jsl" ); 

	// Source dependencies files needed
	lstDependencies = Files In Directory( strPath || "include/", "recursive" );
	For( i = 1, i <= N Items( lstDependencies ), i++,
		Include( strPath || "include/" || lstDependencies[i] )
	); 
	
	/* 1.3. Get tags name and description/unit in the table */
	
	colNames = dt << Get Column Names( "String" );
	TagSelect_AA = Associative Array();
	ColTS = Associative Array(); 
	
	For( i = 1, i <= N Items( colNames ), i++, 
	
		colName = colNames[i];
		
		// Get the real tagname
		tagname = Column( dt, colName ) << Get Property( "tagname" );
		
		// Get the  tagname with unit and description
		tagname_desc_unit = Column( dt, colName ) << Get Property( "tagname_desc_unit" );
		
		addin_col_name = Column( dt, colName ) << Get Property( "addin_colname" );

		// Empty if TS/TS_UTC columns
		If( tagname != Empty(),
			TagSelect_AA[tagname_desc_unit] = tagname
		);
		
		If( addin_col_name == "TS",
			ColTS["TS"] = colName
		);
		
		If( addin_col_name == "TS_UTC",
			ColTS["TS_UTC"] = colName
		);
	); 
	
			
/****************************************************
*  II. USER INTERFACE
******************************************************/
		
			
	window.guarband = New Window( "Guardband",
		V List Box(
			Lineup Box( N Col( 1 ), Spacing( 10 ),
				Outline Box( "Selection",
					Lineup Box( N Col( 2 ), Spacing( 10 ), 
				
						Panel Box( "Select columns", collistbox.columns = Col List Box( all, nlines( 16 ), width( 600 ), MaxSelected( 1 ) ) ),
						Panel Box( "Actions",
							Lineup Box( N Col( 2 ), Spacing( 10 ), 
			// Parameter
								Button Box( "    Parameter    ",
									collistbox.parameter << Append( collistbox.columns << GetSelected );
									txtbx.guardband_path4analysis << Set text( f_GetGuardbandPath( dt, MES, TagSelect_AA ) );
								),
								collistbox.parameter = Col List Box(
									nlines( 1 ),
									MaxItems( 1 ),
									MinItems( 1 ),
									width( 600 ),
									<<Modeling Type( {"Continuous"} )
								), 
			// ID
								Button Box( "ID #",
									collistbox.id << Append( collistbox.columns << GetSelected );
									txtbx.guardband_path4analysis << Set text( f_GetGuardbandPath( dt, MES, TagSelect_AA ) );
								),
								collistbox.id = Col List Box( nlines( 1 ), MaxItems( 1 ), width( 600 ) ), 
			// Product
								Button Box( "Product #", collistbox.product << Append( collistbox.columns << GetSelected ) ),
								collistbox.product = Col List Box( nlines( 1 ), MaxItems( 1 ), width( 600 ) ), 
			// Lot Number
								Button Box( "Lot #",
									collistbox.lot << Append( collistbox.columns << GetSelected );
									txtbx.guardband_path4analysis << Set text( f_GetGuardbandPath( dt, MES, TagSelect_AA ) );
								),
								collistbox.lot = Col List Box( nlines( 1 ), MaxItems( 1 ), MinItems( 1 ), width( 600 ) ), 
			// Sublot Number
								Button Box( "Sublot #", collistbox.sublot << Append( collistbox.columns << GetSelected ) ),
								collistbox.sublot = Col List Box( nlines( 1 ), MaxItems( 1 ), width( 600 ) ), 
			// Step number
								Button Box( "Recipe step #",
									collistbox.step << Append( collistbox.columns << GetSelected );
									txtbx.guardband_path4analysis << Set text( f_GetGuardbandPath( dt, MES, TagSelect_AA ) );
								),
								collistbox.step = Col List Box( nlines( 1 ), MaxItems( 1 ), width( 600 ) ), 
	
			
							), 
			// Button remove
							H Center Box(
								Lineup Box( N Col( 2 ), Spacing( 10 ),
									button.remove = Button Box( "Remove",
										collistbox.id << RemoveSelected();
										collistbox.product << RemoveSelected();
										collistbox.lot << RemoveSelected();
										collistbox.sublot << RemoveSelected();
										collistbox.step << RemoveSelected();
										collistbox.parameter << RemoveSelected();
									),
									Button Box( "Recall", 
									
									
										If( File Exists( str.path_guardband_recall ),
											Eval( Parse( Load Text File( str.path_guardband_recall ) ) ),
											f_DialogError( "No recall available" )
										);
										
										// Remove all existing values
										collistbox.parameter << Remove all;
										collistbox.id << Remove all;
										collistbox.product << Remove all;
										collistbox.lot << Remove all;
										collistbox.sublot << Remove all;
										collistbox.step << Remove all;
										
										// Add values
										collistbox.parameter << Append( AA.guardband_recall["Parameter"] );
										collistbox.id << Append( AA.guardband_recall["ID"] );
										collistbox.product << Append( AA.guardband_recall["Product"] );
										collistbox.lot << Append( AA.guardband_recall["Lot"] );
										collistbox.sublot << Append( AA.guardband_recall["Sublot"] );
										collistbox.step << Append( AA.guardband_recall["Step"] );
										
										txtbx.guardband_path4analysis << Set text( f_GetGuardbandPath( dt, MES, TagSelect_AA ) );
										
									)
								)
							)
						)
					)
				),
				Outline Box( "Options",
					Spacer Box( size( 10, 10 ) ),
					H List Box(
						Panel Box( "Guardbands",
							Lineup Box( N Col( 1 ), Spacing( 10 ), 
								
								H List Box(
									Text Box( "Guardbands table name: " ),
									Spacer Box( size( 10, 10 ) ),
									txteditbx.guardband_table_name = Text Edit Box( Format( Today(), "yyyy-mm-dd" ) || "_GuardbandTable",
										<<Set Script( txtbx.guardband_path4analysis << Set text( f_GetGuardbandPath( dt, MES, TagSelect_AA ) ) ),
										<<set width( 300 )
									)
								),
								txtb.info_guardband_save = Text Box( "Guardbands table will be saved at:  " ),
								txtbx.guardband_path4analysis = Text Box( "", <<set width( 800 ) ),
								chkbox.update_guardband = Check Box(
									{"Update guardbands "}, 
									
									// Check if "update guardbands" opt checked
									int.Opt_use_existing_guardbands = chkbox.use_existing_guardbands << Get();
									int.Opt_update_guardband = chkbox.update_guardband << Get();
									If( int.Opt_update_guardband == 1,
										chkbox.use_existing_guardbands << Set( 1, 0 );
										button.use_existing_guardbands << Visibility( "Collapse" );
										txtb.info_guardband_save << Set text( "Guardbands table will be saved, and replace existing one, at:  " );
									,
										If( int.Opt_use_existing_guardbands == 1,
											txtb.info_guardband_save << Set text( "Guardbands table from the following path will be used:  " ),
											txtb.info_guardband_save << Set text( "Guardbands table will be saved at:  " )
										)
									);
									
									//Update guardband analysis path
									txtbx.guardband_path4analysis << Set text( f_GetGuardbandPath( dt, MES, TagSelect_AA ) );
								),
								H List Box(
									chkbox.use_existing_guardbands = Check Box(
										{"Use existing guardbands "}, 
									
									// Check if "use existing guardbands" opt checked
										int.Opt_use_existing_guardbands = chkbox.use_existing_guardbands << Get();
										int.Opt_update_guardband = chkbox.update_guardband << Get();
										If( int.Opt_use_existing_guardbands == 1,
											chkbox.update_guardband << Set( 1, 0 );
											button.use_existing_guardbands << Visibility( "Visible" );
											txtb.info_guardband_save << Set text( "Guardbands table from the following path will be used:  " );
										,
											If( int.Opt_update_guardband == 1,
												txtb.info_guardband_save << Set text(
													"Guardbands table will be saved, and replace existing ones, at:  "
												),
												txtb.info_guardband_save << Set text( "Guardbands table will be saved at:  " )
											)
											
										);
										
										//Update guardband analysis path
										txtbx.guardband_path4analysis << Set text( f_GetGuardbandPath( dt, MES, TagSelect_AA ) );
									
									),
									Spacer Box( size( 10, 10 ) ),
									button.use_existing_guardbands = Button Box( "   Open guardbands table   ", 
									
										str.path4guardband_selected = "";
										str.path2look = f_GetGuardbandPath( dt, MES, TagSelect_AA, ignore_options = 1 );
										str.path2look_name = Word( -1, str.path2look, "/" );
										str.path2look = Substitute( str.path2look, str.path2look_name, "" );
								
										str.path4guardband = If( Directory Exists( str.path2look ),
											str.path2look,
											If( Directory Exists( strPathGuardband ),
												strPathGuardband,
												"$DOCUMENTS"
											)
										);
									
										str.path4guardband_selected = Pick File(
											"Select guardbands table",
											str.path4guardband,
											{"JMP Files|jmp"},
											1,
											0
										);
								
										str.guardband_table_path_name = Word( -1, str.path4guardband_selected, "/" );
								
										If( str.path4guardband_selected != "",
											button.use_existing_guardbands << Set Button Name( str.guardband_table_path_name );
											txtbx.guardband_path4analysis << Set text( f_GetGuardbandPath( dt, MES, TagSelect_AA ) );
										,
											button.use_existing_guardbands << Set Button Name( "   Open guardbands table   " );
											txtbx.guardband_path4analysis << Set text( "" );
										);
									
									)
								)
								
								

							)
							
						),
						Spacer Box( size( 10, 10 ) ),
						Panel Box( "Data cleaning",
							chkbox.cleanup = Check Box( {"Clean up data"} )
		
						),
						Spacer Box( size( 10, 10 ) ),
						Panel Box( "Chart",
							chkbx.save_guardband_chart = Check Box( {"Save guardband chart to table"} )
		
						)
					)
					
				)
			),
			H Center Box(
				Lineup Box( N Col( 2 ), Spacing( 10 ),
					Button Box( " Ok ", Eval( EXPR_GUARDBAND_RUN ) ),
					Button Box( " Cancel ", window.guarband << Close Window() )
				)
			)
		)
		
	); // End window.guarband

	// Setting
	button.use_existing_guardbands << Visibility( "Collapse" );
	chkbox.cleanup << Set( 1, 1 ); 
	
	// Center window
	f_CenterWindow( window.guarband, WindowSize ); 
	
	
	
);

/****************************************************
*  III. USER SELECTION
******************************************************/
	
EXPR_GUARDBAND_RUN = Expr(

/* 3.1  Get user settings */

	lst.lot = (collistbox.lot << GetItems);
	lst.sublot = (collistbox.sublot << GetItems);
	lst.step = (collistbox.step << GetItems);
	lst.param = (collistbox.parameter << GetItems);
	lst.id = (collistbox.id << GetItems);
	lst.product = (collistbox.product << GetItems);
	int.Opt_use_existing_guardbands = chkbox.use_existing_guardbands << Get();
	int.Opt_update_guardband = chkbox.update_guardband << Get();
	int.Opt_clean_data = chkbox.cleanup << Get();
	int.Opt_save_guardband_chart = chkbx.save_guardband_chart << Get();
						
	int.nb_param = N Items( lst.param );
	int.nb_lot = N Items( lst.lot );
	int.nb_sublot = N Items( lst.sublot );
	int.nb_step = N Items( lst.step );
	int.nb_id = N Items( lst.id );
	int.nb_product = N Items( lst.product );
	
	str.path_guardband4analysis = f_GetGuardbandPath( dt, MES, TagSelect_AA );
	
	
	/* 3.2  Check user settings */
	
	f_Log( "INFO", "Checking guardband settings", section );

	If( int.nb_lot + int.nb_param <= 1,
		f_DialogError( "Required information missing" )
	);
	
	If( And( str.path4guardband_selected == "", int.Opt_use_existing_guardbands == 1 ),
		f_DialogError( "No guardband table selected" )
	);
	
	If( int.Opt_use_existing_guardbands == 1,
		tbl.guardband_table_selected = Open( str.path4guardband_selected, "invisible" );
		lst.column_names = tbl.guardband_table_selected << Get column names( "String" );
		
		If( !(Contains( lst.column_names, "LCL" )),
			f_DialogError( "LCL missing in guardband table" )
		);
		If( !(Contains( lst.column_names, "UCL" )),
			f_DialogError( "UCL missing in guardband table" )
		);
		
		If( And( N Items( lst.column_names ) > 2, int.nb_step == 0 ),
			f_DialogError( "No step selected" )
		);
		
		If( And( N Items( lst.column_names ) == 2, int.nb_step == 1 ),
			f_DialogError( "Missing step column in guardband table" )
		);
		
		If( int.nb_step == 1,
			If( !(Contains( lst.column_names, lst.step[1] )),
				f_DialogError( "Missing step column in guardband table" )
			)
		);
	);
	
	/* 3.3  Log */
	
	
	str.lot = lst.lot[1];
	str.parameter = lst.param[1];
	
	f_Log( "INFO", "Parameter - " || Char( str.parameter ), section );
	f_Log( "INFO", "Lot# - " || Char( str.lot ), section );
	If( int.nb_sublot > 0,
		str.sublot = lst.sublot[1];
		f_Log( "INFO", "Sublot# - " || Char( str.sublot ), section );
	);
	If( int.nb_step > 0,
		str.step = lst.step[1];
		f_Log( "INFO", "Step# - " || Char( str.step ), section );
	);
	If( int.nb_id > 0,
		str.id = lst.id[1];
		f_Log( "INFO", "ID# - " || Char( str.id ), section );
	);
	If( int.nb_product > 0,
		str.product = lst.product[1];
		f_Log( "INFO", "Product# - " || Char( str.product ), section );
	);
	
	/* 3.4  Recall */
	
	f_Log( "INFO", "Saving the selected parameters to guardband recall", section );
	
	AA.guardband_recall = Associative Array();
	AA.guardband_recall["Parameter"] = str.parameter;
	AA.guardband_recall["Lot"] = str.lot;
	If( int.nb_sublot > 0,
		AA.guardband_recall["Sublot"] = str.sublot,
		AA.guardband_recall["Sublot"] = ""
	);
	If( int.nb_step > 0,
		AA.guardband_recall["Step"] = str.step,
		AA.guardband_recall["Step"] = ""
	);
	If( int.nb_id > 0,
		AA.guardband_recall["ID"] = str.id,
		AA.guardband_recall["ID"] = ""
	);
	If( int.nb_product > 0,
		AA.guardband_recall["Product"] = str.product,
		AA.guardband_recall["Product"] = ""
	);
	
	//Save parameters
	Save Text File( str.path_guardband_recall, "AA.guardband_recall = " || Char( AA.guardband_recall ), "replace" );
	
				
/****************************************************
*  IV. DATA PRE-PROCESSING 
******************************************************/
			

	f_Log( "INFO", "START data pre-processing.", section );
	
	 /* 4.1. Recipe: round column values */
	 
	If( int.nb_step > 0,
		f_Log( "INFO", "Round Recipe step column values.", section );
		lst.rounded_step_values = Round( Column( dt, str.step ) << get values() );
		Column( dt, str.step ) << Set Values( lst.rounded_step_values );
	);
	
	 /* 4.2. Lot & Sublot: Create batch column if sublot specified (Lot + Sublot) */ 
	 
	If( int.nb_sublot > 0, 
		
		// Delete column "Lot & Sublot" if it already exist
		Try( dt << Delete Columns( "Lot & Sublot" ) );
				
		f_Log( "INFO", "Create 'Lot & Sublot' column  - " || str.lot || " x " || str.sublot, section );

		Eval(
			Eval Expr(
				dt << New Column( "Lot & Sublot",
					"Character",
					Formula(
						Char( Expr( Parse( ":Name(\!"" || Char(str.lot) || "\!")" ) ) ) || Char(
							Expr(
							
								Parse( ":Name(\!"" ||  Char(str.sublot) || "\!")" )
							)
								
						)
					)
				)
			)
		);
		
		str.col_batch = "Lot & Sublot";
		
	, 
		
		str.col_batch = str.lot
	); // END If int.nb_sublot > 0

	// Create a copy of initial dataset, where we will do some data cleaning
	dt.copy = dt << Subset( All rows, Selected columns only( 0 ), "invisible" );
	
	// Sort in ascending order
	Try(
		Eval( Eval Expr( dt.copy << Sort( By( Expr( ColTS["TS_UTC"] ) ), Replace Table, Order( Ascending ) ) ) ),
		f_DialogError( "Missing timestamp column" )
	);
	

	If( int.Opt_clean_data == 1,
		If( int.nb_sublot > 0, 
		
			
			/* 4.3. Option to clean up data:  eg delete everything before step# turns to 1*/
	
			f_Log( "INFO", "Clean up data: deletion of batched lines whose step# has not been reset", section );

			// Get list of batchs
			tbl.summary_batch = dt.copy << Summary(
				Group( str.col_batch ),
				Freq( "None" ),
				Weight( "None" ),
				statistics column name format( "column" ),
				"invisible"
			);
	
			int.nb_batches = N Rows( tbl.summary_batch );
			lst.batches = Column( tbl.summary_batch, str.col_batch ) << Get values; 
		
			Close( tbl.summary_batch, NoSave );
			
			
	
			dt.copy_cleaned = New Table( "Cleaned data", "invisible" );
		
			For Each( {value, index}, lst.batches, 
		
				Eval(
					Eval Expr(
						lst.rows4batch = dt.copy << Get rows Where( Expr( Parse( ":Name(\!"" || Char(str.col_batch) || "\!")" ) ) == Expr( value ) )
					)
				);
				dt.copy_subset = dt.copy << Subset( Rows( lst.rows4batch ), Selected columns only( 0 ), "invisible" );
				lst.col_step_value = Column( dt.copy_subset, str.step ) << get values;
				lst.rows2remove = List();
			
				For( i = 1, i <= N Items( lst.col_step_value ), i++,
					int.row_value = lst.col_step_value[i];
					If( Num( int.row_value ) == 1,
						Break(),
						Insert Into( lst.rows2remove, i )
					);
				);
				f_Log(
					"WARNING", "Clean up data: Batch " || Char( value ) || " - " || Char( N Items( lst.rows2remove ) ) || " rows will be removed.",
					section
				);
		
				dt.copy_subset << Delete Rows( lst.rows2remove );
				dt.copy_cleaned << Concatenate( dt.copy_subset, "Append to first table" );
				Close( dt.copy_subset, NoSave );
			
			);
			
			Close( dt.copy, NoSave );
			dt.copy = dt.copy_cleaned << Subset( All rows, Selected columns only( 0 ), "invisible" );
			Close( dt.copy_cleaned, NoSave );
			
			If( N Rows( dt.copy ) == 0,
				f_DialogError( "Table empty after cleaning" )
			);
			
	
		/* 4.3.4. Only use step# which are available for all Lots / sublots and ignore/delete the rest */ 
		
			f_Log( "INFO", "Clean up data: keep only step# which are available for every lots/sublots and ignore the rest", section );

		// Get the step# that are not available for all lots / sublots
		
			tbl.summary_steps_by_batches = dt.copy << Summary(
				Group( str.step ),
				N Categories( str.col_batch ),
				Freq( "None" ),
				Weight( "None" ),
				statistics column name format( "column" ),
				"invisible"
			);
		
			Eval(
				Eval Expr(
					lst.rows_with_batches_missing = tbl.summary_steps_by_batches << Get rows where(
						Expr( Parse( ":Name(\!"" || Char(str.col_batch) || "\!")" ) ) < int.nb_batches
					)
				)
			);
		
			lst.steps2remove = As List( Column( tbl.summary_steps_by_batches, str.step )[lst.rows_with_batches_missing] );
			Close( tbl.summary_steps_by_batches, NoSave );
			f_Log(
				"WARNING",
				"Clean up data: " || If( N Items( lst.steps2remove ) > 0,
					"Step(s) ID " || Char( lst.steps2remove ),
					"No step(s)"
				) || " will be removed.", section
			);

		// Remove the incorret steps 
			For Each( {int.step, index}, lst.steps2remove,
				Eval( Eval Expr( lst.rows2remove = dt.copy << Get rows where( Expr( Parse( ":Name(\!"" || Char(str.step) || "\!")" ) ) == int.step ) ) );
				dt.copy << Delete Rows( lst.rows2remove );
			);
			
			If( N Rows( dt.copy ) == 0,
				f_DialogError( "Table empty after cleaning" )
			);
		
	
		)
	);
	
	f_Log( "INFO", "END data pre-processing.", section );
	
/****************************************************
*  V. ALIGNMENT BY STEP
******************************************************/
	
	
	If( int.nb_step > 0, 
	

		f_Log( "INFO", "START data alignment by step.", section );

		Eval(
			Eval Expr(
				tblStep = dt.copy << Summary(
					Group( Expr( Parse( ":Name(\!"" || Char(str.step) || "\!")" ) ) ),
					Freq( "None" ),
					Weight( "None" ),
					Expr( strTableVisibility )
				)
			)
		);
		lst.stepValues = Column( tblStep, 1 ) << Get values;
		Close( tblStep, nosave );
		
		f_Log( "INFO", "Number of steps: " || Char( N Items( lst.stepValues ) ), section );
		i_min_not_empty = 1;

		For( i = 1, i <= N Items( lst.stepValues ), i++, 
					
			// Subset the table to the current step analysed
			i_step = lst.stepValues[i];
			f_Log( "INFO", "Step - " || Char( i_step ) || " / " || Char( N Items( lst.stepValues ) ), section );

			Eval( Eval Expr( rows_step = dt.copy << Get Rows Where( Expr( Parse( ":Name(\!"" || Char(str.step) || "\!")" ) ) == i_step ) ) );
			tbl.subset_step = dt.copy << Subset( Rows( rows_step ), Selected columns only( 0 ), Expr( strTableVisibility ) );
			tbl.subset_step << Set Name( "Guardband table - Step " || Char( i_step ) );
			
			// Align batches
			If( int.Opt_use_existing_guardbands == 1, 
			
				f_Log(
					"INFO", "Option \!"Use existing guardband table\!" enabled. Table selected: " || Char( str.path4guardband_selected ), section
				);
				// GUARDBANDS
				Try(
					Eval(
						Eval Expr(
							lst.rows4step_in_guardband = tbl.guardband_table_selected << Get Rows Where(
								Expr( Parse( ":Name(\!"" || Char(str.step) || "\!")" ) ) == i_step
							)
						)
					);
					tbl.guardband_table_subset_step = tbl.guardband_table_selected << Subset(
						Rows( lst.rows4step_in_guardband ),
						Selected columns only( 0 ),
						Expr( strTableVisibility )
					);
					tbl.aligned_by_steps = f_AlignBatch(
						tbl.subset_step, str.col_batch, str.parameter, int.Opt_use_existing_guardbands, tbl.guardband_table_subset_step,
						strTableVisibility
					);
					Close( tbl.guardband_table_subset_step, nosave );
				, 
			
					tbl.aligned_by_steps = Empty();
					f_Log(
						"WARNING", "Unkown step from selected guardband table: Step" || Char( i_step ) || ". This step will be removed.", section
					);
				
				);
				
				
			, 
				// NO GUARDBANDS
				tbl.aligned_by_steps = f_AlignBatch(
					tbl.subset_step, str.col_batch, str.parameter, int.Opt_use_existing_guardbands, "none", strTableVisibility
				);

			);
			Close( tbl.subset_step, nosave );

			// Concatenate the results
			If( i == i_min_not_empty, 
				 
				If( Is Empty( tbl.aligned_by_steps ),
					i_min_not_empty = i_min_not_empty + 1,
					tbl.guardband = tbl.aligned_by_steps;
					tbl.guardband << Set Name( "Guardband table" );
				)
			, 
				
				If( Is Empty( tbl.aligned_by_steps ) == 0,
					tbl.guardband << Concatenate( tbl.aligned_by_steps, "Append to first table" )
				);
				Try( Close( tbl.aligned_by_steps, nosave ) );

			);
			Close( tbl.subset_step, nosave );


		); // END LOOP ON STEP
		
		f_Log( "INFO", "END data alignment by step", section );
		
	, 
	
	
		f_Log( "INFO", "START data alignment", section );
		If( int.Opt_use_existing_guardbands == 1, 
		
		// GUARDBAND
			tbl.guardband = f_AlignBatch(
				dt.copy, str.col_batch, str.parameter, int.Opt_use_existing_guardbands, tbl.guardband_table_selected, strTableVisibility
			)
		, 
		// NO GUARDBANDS
			tbl.guardband = f_AlignBatch( dt.copy, str.col_batch, str.parameter, int.Opt_use_existing_guardbands, "none", strTableVisibility )
		);
		tbl.guardband << Set Name( "Guardband table" );
		f_Log( "INFO", "END data alignment", section );

	); // END If int.nb_step > 0

	
	
	// Get list of batches
	Eval(
		Eval Expr(
			tblBatches = dt.copy << Summary(
				Group( Parse( ":Name(\!"" || Char(str.col_batch) || "\!")" ) ),
				Freq( "None" ),
				Weight( "None" ),
				"invisible"
			)
		)
	);
	lst.batches = Column( tblBatches, 1 ) << Get values;
	Close( tblBatches, nosave );
	
	// Get the references of batches
	lst.batches_ref = {};
	For( i = 1, i <= N Items( lst.batches ), i++,
		col_ref = Expr(
			
			Parse( ":Name(\!"" || Char(lst.batches[i]) || "\!")" )
					
		);
		Insert Into( lst.batches_ref, col_ref );
	);
		
	Close( dt.copy, NoSave );
	
		
/****************************************************
*  VI. GUARDBAND TABLE
******************************************************/	
	
	
	
/* 6.1.a Case (1): Use existing guardbands*/ 

	If( int.Opt_use_existing_guardbands == 1, 
	
		f_Log( "INFO", "Get LCL/UCL from selected guardband table ", section );

		tbl.guardband << Update(
		
			With( tbl.guardband_table_selected ),
			Add columns from Update table( {"LCL", "UCL"} ),
			Replace columns in main table( "None" )
		
		);
		Close( tbl.guardband_table_selected, nosave );

	, 

/* 6.1.b Case (2): No existing guardbands*/ 

		
		f_Log( "INFO", "Calculate LCL/UCL from new batches", section );

		Eval( Eval Expr( tbl.guardband << New Column( "Average", Formula( Mean( Expr( lst.batches_ref ) ) ) ) ) );
		Eval( Eval Expr( tbl.guardband << New Column( "Std Dev", Formula( Std Dev( Expr( lst.batches_ref ) ) ) ) ) );
		tbl.guardband << New Column( "LCL", Formula( :Average - 3 * :Std dev ) );
		tbl.guardband << New Column( "UCL", Formula( :Average + 3 * :Std dev ) );
				

/* 6.2 Save guardbands  */ 

		int.Opt_replace = 0;
		
		If( And( int.Opt_update_guardband == 1, File Exists( str.path_guardband4analysis ) ), 
		
			// Warning window
			WinReplace = New Window( "Guardbands",
				<<Modal,
				V List Box(
						
					Text Box( "Existing guardbands table at : \!r" || str.path_guardband4analysis || "\!r\!r Do you want to replace them ? \!r" ),
					H List Box( Button Box( "Ok", int.Opt_replace = 1 ), Button Box( "Cancel", int.Opt_replace = 0 ) )
				), 
					
			); // End Window
				
			// Script for Modal Window to cancel it
			If( WinReplace["Button"] == -1, // canceled
				int.Opt_replace = 0
			);
		
		
		,
			int.Opt_replace = 1
		);
		
		
		If(
			Or(
				And( int.Opt_update_guardband == 0, int.Opt_use_existing_guardbands == 0 ),
				And( int.Opt_update_guardband == 1, int.Opt_replace == 1 )
			), 
			
			Eval(
				Eval Expr(
					tbl.guardband_table_selected = New Table( "Guardbands",
						Add Rows( 0 ),
						New Column( "LCL",
							Numeric,
							"Continuous",
							Format( "Best", 12 ),
							Set Values( Column( tbl.guardband, "LCL" ) << Get values() )
						),
						New Column( "UCL",
							Numeric,
							"Continuous",
							Format( "Best", 12 ),
							Set Values( Column( tbl.guardband, "UCL" ) << Get values() )
						),
						Expr( strTableVisibility )
				
					)
				)
			);
	
	// Add step if any
			If( int.nb_step > 0,
				tbl.guardband_table_selected << New Column( str.step,
					Numeric,
					"Continuous",
					Format( "Best", 12 ),
					Set Values( Column( tbl.guardband, str.step ) << Get values() )
				)
			);
			
			// Create the directory if it does not exist 
			str.path_guardband4analysis_name = Word( -1, str.path_guardband4analysis, "/" );
			str.directory_path = Substitute( str.path_guardband4analysis, str.path_guardband4analysis_name, "" );
			If( !(Directory Exists( str.directory_path )),
				Create Directory( str.directory_path )
			);
	
			// Save guardband table
			If( File Exists( str.path_guardband4analysis ),
				f_Log( "WARNING", "File already existing at:  " || str.path_guardband4analysis, section );
				If( And( int.Opt_update_guardband == 1, int.Opt_replace == 1 ),
					f_Log( "INFO", "Replacing the old file by the new one", section );
					Delete File( str.path_guardband4analysis );
					Try(
						tbl.guardband_table_selected << Save( str.path_guardband4analysis );
						f_Log( "INFO", "Sucessful guardband table backup", section );
					,
						f_DialogError( "Please close all opened guardband tables first" )
					);
				,
					f_Log( "WARNING", "Guardband table backup failed", section )
				);
			,
				Try(
					tbl.guardband_table_selected << Save( str.path_guardband4analysis ),
					f_DialogError( "Please close all opened guardband tables first" )
				)
			);
			
			Close( tbl.guardband_table_selected, nosave );
	
		);
	);
	
/* 6.3 Highlight in red OOC  */ 

	f_Log( "INFO", "Create OOC columns", section );
	
	lst.UCL_values = As List( Column( tbl.guardband, "UCL" ) << Get values() );
	lst.LCL_values = As List( Column( tbl.guardband, "LCL" ) << Get values() );
	lst.OOC_col = List();
	lst.OOC_col_ref = List();
	
	// Create OOC column(s)
	For Each( {value, index}, lst.batches,
		f_Create_OOC_Column( tbl.guardband, value, lst.LCL_values, lst.UCL_values );
		Insert Into( lst.OOC_col, "OOC - " || Char(value ));
	);
	
	// Conver into references
	For( i = 1, i <= N Items( lst.OOC_col ), i++,
		col_ref = Expr(
			
			Parse( ":Name(\!"" || Char(lst.OOC_col[i]) || "\!")" )
					
		);
		Insert Into( lst.OOC_col_ref, col_ref );
	);
	
	
	Eval( Eval Expr( tbl.guardband << Group Columns( "OOC Generated columns", Expr( lst.OOC_col_ref ) ) ) );

		
/****************************************************
*  VII. GUARDBAND CHART
******************************************************/

	f_Log( "INFO", "Create Guardband chart", section );
	
	// Log
	lst.log_contents = Get Log();
	str.log_contents = "";
	For( i = 1, i <= N Items( lst.log_contents ), i++,
		str.log_contents = str.log_contents || lst.log_contents[i] || "\\!n"
	);
		
	// Create Guardband
	{str.guardband_plot, str.guardband_plot_title} = f_GuardbandChart(
		tbl.guardband, str.parameter, lst.batches, lst.step, lst.id, lst.product, int.Opt_clean_data, str.log_contents,WindowSize
	);
	
	// Run Guardband
	Current Data Table( tbl.guardband );
	Eval( Parse( str.guardband_plot ) );
			
	window.guardband_chart << Maximize Window( 1 );
	window.guarband << Close Window();
	
	If( int.Opt_save_guardband_chart == 1, 
		
		str.name_original_table = dt << Get name();
		
		str.add_batches_and_OOC = "";
		
		For Each( {value, index}, lst.batches, 
			
			str.add_batches_and_OOC = str.add_batches_and_OOC || ", New Column( \!" " || Char( value ) || "\!",  Continuous, Set Values(" ||
			Char( Column( tbl.guardband, value ) << Get values() ) || ")), New Column( \!" " || "OOC - " || value || "\!", Continuous, Set Values("
			 || Char( Column( tbl.guardband, "OOC - " || value ) << Get values() ) || "))"
		);
		
		str.add_step = "";
		If( int.nb_step > 0,
			str.add_step = ",
	New Column( \!" " || str.step || " \!",
		Continuous,
		Set Values(" ||
			Char( Column( tbl.guardband, str.step ) << Get values() ) || " )
	)"
		);
		
		
		str.create_guardband_table = "tbl.guardband = New Table( \!" " || str.name_original_table || " - cleaned for Guardbands" ||
		"\!",\!"invisible\!",
	New Column( \!"LCL\!",
		Continuous,
		Set Values(" || Char( Matrix( lst.LCL_values ) ) ||
		" )
	),
	New Column( \!"UCL\!",
		Continuous,
		Set Values(" || Char( Matrix( lst.UCL_values ) ) || " )
	)
	" ||
		str.add_batches_and_OOC || str.add_step || "
);";
		Eval(
			Substitute(
					Expr(
						dt << NewScript(
							s_str.guardband_plot_title || "_frozen", 
							
							
							Eval( Parse( s_str.create_guardband_table ) );
							
							lst.batches = s_lst.batches;
							lst.OOC_col = s_lst.OOC_col;
							lst.OOC_col_ref = List();
								
							For( i = 1, i <= N Items( lst.OOC_col ), i++,
								col_ref = Expr(
			
									Parse( ":Name(\!"" || Char(lst.OOC_col[i]) || "\!")" )
					
								);
								Insert Into( lst.OOC_col_ref, col_ref );
								Column( tbl.guardband, lst.OOC_col[i] ) << Hide( 1 );
							);
							
							str.log_contents = s_str.log_contents;
							
							Eval( Eval Expr( tbl.guardband << Group Columns( "OOC Generated columns", Expr( lst.OOC_col_ref ) ) ) );
							
							Eval( Parse( s_str.guardband_plot ) );
							window.guardband_chart << Maximize Window( 1 );
							
						)
					),
				Expr( s_lst.batches ), Eval Expr( lst.batches ),
				Expr(
					s_str.guardband_plot_title
				), Eval Expr( str.guardband_plot_title ),
				Expr( s_lst.OOC_col ), Eval Expr( lst.OOC_col ),
				Expr( s_str.log_contents ), Eval Expr( str.log_contents ),
				Expr( s_str.guardband_plot ), Eval Expr( str.guardband_plot ),
				Expr(
					s_str.create_guardband_table
				),
					Eval Expr( str.create_guardband_table )

			)
		);
	);
	
	Current Data Table( dt );
	
); // End EXPR_GUARDBAND
