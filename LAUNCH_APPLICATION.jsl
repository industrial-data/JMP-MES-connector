/***********************************************************
 * General Information
 *
 * Script Title    : Launch Application
 * Version         : 2.0
 *
 * Description:
 *
 * This is the main script which, when launched, loads all the other JSL scripts required, and opens the user interface.
 *
 ************************************************************/

/***********************************************************
 *                SCRIPT TABLE OF CONTENTS
 ************************************************************/

/****************************************************
 *  I. GLOBALS, PATH & FUNCTION
 *  II. USER INTERFACE 
 *  III. PARAMETERS
 ****************************************************/


/****************************************************
*  I. GLOBALS, PATH & FUNCTION
******************************************************/


Names Default To Here( 1 );
Set Preference( Use JMP Locale Settings( 1 ) );

Clear Log();
Print( "INFO:        START Script IP21PI Data Retrieval at " || Format( Today(), "d/m/y h:m:s" ) );

Print( "INFO:        JMP Version - " || Char( JMP Version() ) );

If( Host is( "Windows" ),
	Print( "INFO:        Windows system" )
);
If( Host is( "Mac" ),
	Print( "INFO:        Mac system" )
);

// Add-in path (DEV)
//strPath = Get Path Variable( "ADDIN_HOME(MES.Data.Retrieval.DEV)" );

// Add-in path (PROD)
strPath = Get Path Variable( "ADDIN_HOME(MES.Data.Retrieval.OS)" );

// Config file
Include( strPath || "config/config.jsl" );
Print( "INFO:        Add-in Version - " || Char( Version ) );


// Source dependencies files needed
ps_path = Convert File Path( strPath || "doc/external/OLEDB_extract.ps1", windows );
lstDependencies = Files In Directory( strPath || "include/", "recursive" );
For( i = 1, i <= N Items( lstDependencies ), i++,
	Include( strPath || "include/" || lstDependencies[i] )
);


Try(
// Source the file with the list of server
	dt_MES_servers = Eval(
		Eval Expr(
			Open(
				strPathServerlist,
				Import Settings(
					End Of Line( CRLF, CR, LF ),
					End Of Field( Other( ";" ), CSV( 0 ) ),
					Strip Quotes( 1 ),
					Use Apostrophe as Quotation Mark( 0 ),
					Use Regional Settings( 0 ),
					Scan Whole File( 1 ),
					Treat empty columns as numeric( 0 ),
					CompressNumericColumns( 0 ),
					CompressCharacterColumns( 0 ),
					CompressAllowListCheck( 0 ),
					Labels( 1 ),
					Column Names Start( 1 ),
					Data Starts( 2 ),
					Lines To Read( "All" ),
					Year Rule( "20xx" )
				),
				Expr( strTableVisibility )
			)
		)
	)
,
	f_DialogError( "Server connection failed" )
);

// Add 2 additional columns in Data Table MES_servers_list : "JMP_list"" and "NetworkNode"
dt_MES_servers << New Column( "JMP_list",
	"Character",
	Formula( :zone || " - " || :site || " (" || :atelier || ") " || " [" || :Type || "]" || " - " || :ShortName )
);
dt_MES_servers << New Column( "NetworkNode", "Character", Formula( If( :extension != "", :DirectoryHost || "." || :extension, :DirectoryHost ) ) );

// Sort the servers list by JMP_list column name
dt_MES_servers << Sort( By( :JMP_list ), Replace Table, Order( Ascending ), Copy formula( 0 ) );

// Remembers last action by users and moves server to the top
::server_moved = 0;

If( Not( Is Empty( ::selected_MES_index_recall ) ),
	dt_MES_servers << Select Rows( ::selected_MES_index_recall );
	dt_MES_servers << Move Rows( At Start );
	::server_moved = 1;
);

// Retrieve the values from MES Servers list data Table
MES_list = dt_MES_servers:JMP_list << GetValues;
ServerTypeList = dt_MES_servers:Type << GetValues;
ServerURLs = dt_MES_servers:DirectoryHost << GetValues;
SiteNames = dt_MES_servers:site << GetValues;
ShortNames = dt_MES_servers:ShortName << GetValues;
NetworkNodes = dt_MES_servers:NetworkNode << GetValues;
Extensions = dt_MES_servers:extension << GetValues;
StrTagName = "";
StrTagDesc = "";

// Close the data table with the list of MES servers
Close( dt_MES_servers, NoSave );


// Associative Array with the tag with [KEYS]/Without unit description [VALUE]
TagSelect_AA = Associative Array();

// Initialize the associative array with all filters (empty for the moment because there is no filters)
Filters_AA = Associative Array(); //[KEY: ID, corresponds to the order of appearance in the list of filters] [VALUE: 1- Tagname with unit/descr (str) / 2- Tag Type (str) / 3- Filters (list of list)]
TagType_AA = Associative Array(); //[KEY:Tagname with unit/descr (str)] [VALUE: 1- Tag Type (str) ]
NextID = 1;

/****************************************************
*  II. USER INTERFACE
******************************************************/

// Screen dimensions
DevX = 1536;
DevY = 874;
ScreenX = WindowSize[1];
ScreenY = WindowSize[2];
RatioX = ScreenX / DevX;
RatioY = ScreenY / DevY;

TitleTab1 = "." || Repeat( " ", 90 * RatioX ) || "Data Extraction Details" || Repeat( " ", 90 * RatioX ) || ".";
TitleTab2 = "." || Repeat( " ", 106 * RatioX ) || "Filter" || Repeat( " ", 106 * RatioX ) || ".";


WinTag = New Window( "IP21PI Data Retrieval",
	V List Box(
		H List Box(
			V Center Box(
				Border Box( Left( 520 * RatioX ),
					H List Box(
						Text Box(
							"<font color=\!"#059fe0\!"> MES Data Retrieval",
							<<markup,
							<<SetFontSize( 16 ),
							<<Set Font( "Century Gothic" ),
							<<Set Font Style( "Bold" )
						),
						Spacer Box( Size( 600 * RatioX, 0 ) ),
						bttn_help = Button Box( "Help",
							If( Starts With( strPathHelpDoc, "/" ),
								strPathHelpDoc = Right( strPathHelpDoc, Length( strPathHelpDoc ) - 1 )
							);
							f_openFileInOSDefault( strPathHelpDoc );
						)
					)
				)
			)
		),
		Border Box( Left( 10 * RatioX ), top( 20 ),
			Tab Box(
			
/* Tab 1 : Data Extraction details */

				Tab Page Box(
					TitleTab1,
					Icon( "SASFolders" ),
					H List Box(
						Border Box( Left( 10 ), Top( 20 ),
							Outline Box( "Server",
								Panel Box( "",
									H List Box(
										Border Box( top( 10 ), Left( 15 ), Icon Box( "SearchIndex" ) ),
										Spacer Box( size( 5, 10 ) ), 
											
										Border Box( top( 10 ), Left( 15 ),
											txt_SearchBarServer = Text Edit Box( "",
												<<set width( 290 * RatioX ),
												<<set text changed( f_SearchBarServer )
											)
										),
										Border Box( top( 8 ), Left( 15 ),
											bttn_ResetSearchServer = Button Box( "",
												<<set icon( "DebuggerDeleteBreakpoint" ),
												<<set script(
													txt_SearchBarServer << set text( "" );
													f_SearchBarServer( txt_SearchBarServer, "" );
												),
												<<set tip( "Clear filter" ), 

											)
										)
									),
									Border Box( top( 15 ), Left( 15 ),
										lst_MES_servers = List Box(
											{},
											width( 500 * RatioX ),
											max selected( 1 ),
											nlines( 10 ), 
						// When user select a MES we update the informations displayed
											Try(
												selected_MES = (lst_MES_servers << Get Selected)[1];
												For( i = 1, i <= N Items( MES_list ), i++,
													If( MES_list[i] == selected_MES,
														selected_MES_index = i;
														Break();
													)
												);
												f_UpdateMESInfo( selected_MES_index );
											)
										)
									),
									Border Box( top( 10 ), Left( 15 ),
										chkbox_edit_adress = Check Box(
											{"Edit server address"},
											is_checked = chkbox_edit_adress << Get();
											If( is_checked == 1,
												panel_ServerAdress << Visibility( "Visible" ),
												panel_ServerAdress << Visibility( "Collapse" )
											);
										)
									), 
								//panel_ServerAdress = Panel Box( "Server details",
									Border Box( top( 10 ), Left( 15 ),
										Lineup Ruler Box(
											Widths( {120 * RatioX, 200 * RatioY} ),
											panel_ServerAdress = Outline Box( "Server details",
												Panel Box( "",
													Lineup Box( N Col( 2 ),
														Text Box( "Address:" ),
														txtbox_ServerAddress = Text Edit Box( "" ),
														Text Box( "Extension:" ),
														txtbox_ServerExtension = Text Edit Box( "" ),
														Text Box( "Shortname:" ),
														txtbox_Shortname = Text Edit Box( "" ),
														rdbox_ServerType = Radio Box(
															{"IP21", "PI"},
															f_DialogWarning( "All filters removed" );
															lstFiltersRegistered << Remove All;
															Filters_AA = Associative Array();
															NextID = 1;
														)
													)
												)
											)
										)
									),
									Border Box( top( 15 ), Left( 15 ), Bottom( 8 ),
										Lineup Box( N Col( 3 ),
											Text Box( "Name data file:" ),
											Spacer Box( Size( 15, 15 ) ),
											txt_TableName = Text Edit Box( "", <<Set Width( 180 * RatioX ) )
										)
									)
								)
							) // END Outline box Server
						),
						Border Box( top( 20 ), Left( 15 ),
							V List Box(
								Outline Box( "Tag search",
									Panel Box( "",
										Lineup Ruler Box(
											Widths( {120 * RatioX, 200 * RatioY} ),
											Lineup Box( N Col( 2 ), spacing( 10 ),
												Text Box( "Tagname:" ),
												txtbox_TagName = Text Edit Box( "" ),
												Text Box( "Description:" ),
												txtbox_TagDesc = Text Edit Box( "" )
											)
										),
										V Center Box(
											Button Box( "Find tags",
												Try( selected_MES = (lst_MES_servers << Get Selected)[1], f_DialogError( "No server selected" ) );
												For( i = 1, i <= N Items( MES_list ), i++,
													If( MES_list[i] == selected_MES,
														selected_MES_index = i;
														Break();
													)
												);
												is_checked = chkbox_edit_adress << Get();
												MES = txtbox_ServerAddress << Get Text;
												ServerExtension = txtbox_ServerExtension << Get Text;
												ShortName = txtbox_Shortname << Get text;
												ServerType = rdbox_ServerType << Get Selected;
	
												f_CheckMESInfo( MES, ServerExtension, ServerType, ShortName, is_checked );

												// sets the recall to 0 on first run
												If( Is Empty( ::selected_MES_index_recall ),
													::selected_MES_index_recall = 0
												);
												If( ::server_moved == 1 & selected_MES_index > 1 & selected_MES_index < ::selected_MES_index_recall, 
												// Server has moved to top but user changed server to query
													::selected_MES_index_recall = selected_MES_index - 1
												,
													::selected_MES_index_recall = selected_MES_index
												);
		
	
												If( is_checked == 1,
													NetworkNode = Char( MES ) || "." || Char( ServerExtension );
													f_Log( "INFO", "User has edited the server address - " || NetworkNode );
												);
												Eval( f_button.find_tags );
											)
										)
									)
								)
							)
						),
						V List Box(
							Border Box( top( 20 ), Left( 15 ),
								Outline Box( "Start/End time",
									Panel Box( "",
										Lineup Box( N Col( 3 ), spacing( 10 ),
											Text Box( "Start time:" ),
											StartTime = Number Edit Box( 0 ),
											bttn_Round = Button Box( "Round",
												Start = StartTime << get();
												PeriodNumVal = PeriodValue << Get;
												PeriodUnits = rdbox_PeriodUnits << Get Selected;
												NewStartTime = f_UpdateDate( Start, PeriodNumVal, PeriodUnits );
												StartTime << set( NewStartTime );
											),
											Text Box( "End time:" ),
											EndTime = Number Edit Box( 0 ),
											bttn_Now = Button Box( "Now",
												PeriodNumVal = PeriodValue << Get;
												PeriodUnits = rdbox_PeriodUnits << Get Selected;
												NewendTime = f_UpdateDate( Today(), PeriodNumVal, PeriodUnits );
												EndTime << set( NewendTime );
											)
										)
									)
								)
							),
							Border Box( top( 20 ), Left( 15 ),
								Outline Box( "Options",
									Panel Box( "",
										Lineup Ruler Box(
											Widths( {140 * RatioX, 150 * RatioY} ),
											Border Box( Left( 15 ), Right( 15 ),
												Lineup Box( N Col( 2 ), spacing( 15 ),
													Text Box( "Compute summary table:" ),
													OptSummary = Check Box( {""} ),
													Text Box( "Workflow:" ),
													bttnWorkflow = Button Box( "Select file", 
												 	
														strWorkflowPath == "";
												 	
												 	// The user select the workflow path
														strWorkflowPath = Pick File(
															"Select Workflow File",
															"$DOCUMENTS",
															{"JMP Files|jmpflow"},
															1,
															0
														);
													
													// Get workflow name
														strWorkflowName = Word( -1, strWorkflowPath, "/" );
														If( strWorkflowPath != "",
															bttnWorkflow << Set Button Name( strWorkflowName ),
															bttnWorkflow << Set Button Name( "Select file" )
														);
													)
												)
											)
										)
									)
								)
							)
						)
					), // End H List Box
					Border Box( Left( 10 ), Top( 20 ),
						H List Box(
							Outline Box( "Tag selection",
								H List Box(
									V List Box(
										Border Box( Top( 15 ), Bottom( 5 ), Left( 4 ),
											Lineup Box( N Col( 2 ), Text Box( "Available tags" ), txtbox_nbTags = Text Box( " >>>" ) )
										),
										H List Box(
							
											Border Box( top( 2 ), Icon Box( "SearchIndex" ) ),
											Spacer Box( size( 5, 10 ) ), 
											
											Border Box( top( 2 ),
												txt_SearchBarTag = Text Edit Box( "",
													<<set width( 550 * RatioX ),
													<<set text changed( f_SearchBarTag )
												)
											),
											bttn_ResetSearchTag = Button Box( "",
												<<set icon( "DebuggerDeleteBreakpoint" ),
												<<set script(
													txt_SearchBarTag << set text( "" );
													f_SearchBarTag( txt_SearchBarTag, "" );
												),
												<<set tip( "Clear filter" ), 

											)
										),
										Border Box( Left( 26 ), lstAvailableTags = List Box( {}, <<Set Size( 550 * RatioX, 272 * RatioY ) ) )
					
									),
									V List Box(
										Border Box( Top( 145 * RatioY ), Right( 10 ), Left( 10 ),
											bttn_AddTag = Button Box( "", 
								
												selected_tags = lstAvailableTags << GetSelected;
								
												// Update TagList and TagList_DescUnit
												If( N Items( selected_tags ) > 0, 
												
													For( k = N Items( selected_tags ), k >= 1, k--, 
													
														TagToAdd = selected_tags[k];
														indTag = As List( Loc( TagList_DescUnit, TagToAdd ) )[1];
														TagToAdd_NO_desc_units = tag_NO_desc_units_list[indTag];
														
														// Check if it was already added
														TagToAdd_NOTYPE = f_RemoveSuffixFromWord( TagToAdd, AllTypes );
														TagSelect_AA_KEYS = TagSelect_AA << get keys;
														If( !Contains( TagSelect_AA_KEYS, TagToAdd_NOTYPE ),
															If( !Contains( TagSelect_AA_KEYS, TagToAdd_NO_desc_units ), 
															
																TagSelect_AA[TagToAdd_NOTYPE] = TagToAdd_NO_desc_units
															, 
																
																f_DialogWarning( "Tag " || Char( selected_tags[k] ) || " already exists" );
																Remove From( selected_tags, k );
															)
														);
													);
													
												);
												
												// Update list of selected tags in first tab
												lstbox_SelectedTags << Append( selected_tags );
												lstbox_SelectedTags2 << Append( selected_tags );
												
												// Update number of selected tags
												n_selected = N Items( lstbox_SelectedTags << Get Items() );
												Try(
													If( n_selected == 0,
														txtbox_nbSelectTags << Set Text( "" ),
														txtbox_nbSelectTags << Set Text( " [ " || Char( n_selected ) || " ]" )
													) 

												);
												
											)
										),
										Border Box( Right( 10 ), Left( 10 ),
											bttn_RemoveTag = Button Box( "", 
								
									// Update TagList and TagList_DescUnit
												Try(
													tags_to_remove = lstbox_SelectedTags << Get selected();
													For( i = 1, i <= N Items( tags_to_remove ), i++,
														TagToRemove = tags_to_remove[i];
														TagToRemove_NOTYPE = f_RemoveSuffixFromWord( TagToRemove, AllTypes );
														TagSelect_AA << Remove( TagToRemove_NOTYPE );
														
														If( N Items( Filters_AA << get keys ) > 0, 
														
															indToRemove = List();

															For Each( {{key, value}, index}, Filters_AA, 
					
																If(
																	Or(
																		Contains( TagToRemove, Char( value[1] ) ),
																		Try(
																			And(
																				Contains( TagToRemove, Char( value[1][1] ) ),
																				Char( value[1] ) != "."
																			)
																		),
																		Try(
																			And(
																				Contains( TagToRemove, Char( value[1][2] ) ),
																				Char( value[2] ) != "."
																			)
																		)
																	),
																	Insert Into( indToRemove, key )
																)
															);
														
														// Remove from list of filters in UI
															For( j = N Items( Filters_AA << get keys ), j >= 1, j = j - 1,
																If( Contains( indToRemove, j ),
																	lstFiltersRegistered << Remove Item( j )
																)
															);
															
														// Remove from list of filters in algo
															Filters_AA = f_ReorderAssociativeArray( Filters_AA, indToRemove );
															NextID = N Items( Filters_AA ) + 1;
														
														
														);
														
													);
												);
									// Update list of tags analyzed in first tab
												lstbox_SelectedTags << Remove Selected;
									// Update list of tags analyzed in second tab
												lstbox_SelectedTags2 << Remove All;
												lstbox_SelectedTags2 << Append( lstbox_SelectedTags << Get Items() );
									
									// Update number of tags analyzed
												n_selected = N Items( lstbox_SelectedTags << Get Items() );
												Try(
													If( n_selected == 0,
														txtbox_nbSelectTags << Set Text( "" ),
														txtbox_nbSelectTags << Set Text( " [ " || Char( n_selected ) || " ]" )
													)
												);
						
											)
										)
									),
									V List Box(
										Border Box( Top( 20 ),
											Lineup Box( N Col( 2 ), Text Box( ">>> Selected tags" ), txtbox_nbSelectTags = Text Box( " " ) )
										),
										Border Box( Top( 18 ), Left( 2 ),
											lstbox_SelectedTags = List Box( {}, <<Set Size( 550 * RatioX, 272 * RatioY ) )
										),
										Lineup Box( N Col( 2 ),
											bttn_RemoveAll = Button Box( " Remove all ",
												lstbox_SelectedTags << Remove All;
												lstbox_SelectedTags2 << Remove All;
												lstFiltersRegistered << Remove All;
												txtbox_nbSelectTags << Set Text( "" );
												TagSelect_AA = Associative Array();
												Filters_AA = Associative Array();
												NextID = 1;
											),
											bttn_PasteTag = Button Box( "Paste",
												copiedtags = Get Clipboard();
												copiedtaglist = Words( copiedtags, "\!t\!r\!n" );
									// Check for duplicates
												unique_copiedtaglist = List();
												For( i = 1, i <= N Items( copiedtaglist ), i++,
													txt_copied = Trim( Char( copiedtaglist[i] ) );
													If( !(Contains( unique_copiedtaglist, txt_copied )),
														Insert Into( unique_copiedtaglist, txt_copied )
													);
												);
												
												For( i = 1, i <= N Items( unique_copiedtaglist ), i++,
													TagToAdd = unique_copiedtaglist[i];
													// Check if it was already added		
													list = TagSelect_AA << get values;
													If( !(Contains( list, TagToAdd )),
														TagSelect_AA[TagToAdd] = TagToAdd;
														// Add the copied-paste tags in the tag list to analyze 
														lstbox_SelectedTags << Append( TagToAdd );
														lstbox_SelectedTags2 << Append( TagToAdd );
													,
														f_DialogWarning( "Tag " || Char( TagToAdd ) || " already exists" )
													);
													
												);
												
												
									
												n_selected = N Items( lstbox_SelectedTags << Get Items() );
									// Update the number of tags to analyze displayed in the UI
												Try(
													If( n_selected == 0,
														txtbox_nbSelectTags << Set Text( "" ),
														txtbox_nbSelectTags << Set Text( " [ " || Char( n_selected ) || " ]" );

													)
												);
									
											)
					
										)

									),
									V List Box(
										Border Box( Left( 10 ), Top( 145 * RatioY ),
											bttn_UpTag = Button Box( "",
												lstTag_tochange = lstbox_SelectedTags << Get Items();
												Tags_tomove = lstbox_SelectedTags << GetSelected();
												If( N Items( Tags_tomove ) > 0,
													lstTag_tochange = f_MoveUp( lstTag_tochange, Tags_tomove );
													lstbox_SelectedTags << Remove All;
													lstbox_SelectedTags2 << Remove All;
													lstbox_SelectedTags << Append( lstTag_tochange );
													lstbox_SelectedTags2 << Append( lstTag_tochange );

													For( i = 1, i <= N Items( Tags_tomove ), i++,
														lstbox_SelectedTags << Set selected( Contains( lstTag_tochange, Tags_tomove[i] ) )
													);
												);

											)
										),
										Border Box( Left( 10 ),
											bttn_DownTag = Button Box( "",
												lstTag_tochange = lstbox_SelectedTags << Get Items();
												Tags_tomove = lstbox_SelectedTags << GetSelected();
												If( N Items( Tags_tomove ) > 0,
													lstTag_tochange = f_MoveDown( lstTag_tochange, Tags_tomove );
													lstbox_SelectedTags << Remove All;
													lstbox_SelectedTags2 << Remove All;
													lstbox_SelectedTags << Append( lstTag_tochange );
													lstbox_SelectedTags2 << Append( lstTag_tochange );

													For( i = 1, i <= N Items( Tags_tomove ), i++,
														lstbox_SelectedTags << Set selected( Contains( lstTag_tochange, Tags_tomove[i] ) )
													);
												);
											)
										)
									)
								)
							),
							Outline Box( "Extraction",
								V List Box(
									Lineup Ruler Box(
										Widths( {120 * RatioX, 200 * RatioY} ),
										Lineup Box( N Col( 1 ), Spacing( 10 ),
											Panel Box( "Method",
												rdbox_Method = Radio Box(
													{"Interpolated", "Average", "Actual"}, 
													// Hide period panel if actual method
													method_selected = rdbox_Method << Get();
													If( method_selected == 3,
														PeriodPanel << Visibility( "Collapse" ),
														PeriodPanel << Visibility( "Visible" )
													);
												)
											), 
									
											PeriodPanel = Panel Box( "Period",
												PeriodValue = Number Edit Box( 10 ),
												rdbox_PeriodUnits = Radio Box( {"Second", "Minute", "Hour", "Day"} )
											)
										)
									),
									Lineup Ruler Box(
										Widths( {200 * RatioX, 200 * RatioY} ),
										Lineup Box( N Col( 1 ), Spacing( 10 ),
											bttn_Extraction = Button Box( "Run extraction", Eval( EXPR_DATA_EXTRACTION ) )
										)
									)
								)
							)
						)
					)
				), // End Tab Box Page "Data Extraction Details"
				
				
/* Tab 2 : Filters  */

				Tab Page Box(
					TitleTab2,
					Icon( "Filter" ), 
					
					Border Box( Left( 40 ), Top( 20 ),
						V List Box(
					
							Outline Box( "Select filter ",
								Border Box( Top( 15 ), Bottom( 15 ),
									V List Box(
										H List Box(
											Border Box( Left( 11 ),
												Panel Box( "Selected tags", 
										
													V List Box(
											
														H List Box(
									
															Border Box( top( 2 ), Icon Box( "SearchIndex" ) ),
															Spacer Box( size( 5, 10 ) ), 
											
															Border Box( top( 2 ),
																txt_SearchBarFilter = Text Edit Box( "",
																	<<set width( 650 * RatioX ),
																	<<set text changed( f_SearchBarFilter )
																)
															),
															bttn_ResetSearchFilter = Button Box( "",
																<<set icon( "DebuggerDeleteBreakpoint" ),
																<<set script(
																	txt_SearchBarFilter << set text( "" );
																	f_SearchBarFilter( txt_SearchBarFilter, "" );
																),
																<<set tip( "Clear filter" ), 

															)
													
														), 
										
														Border Box( Left( 26 ),
															lstbox_SelectedTags2 = List Box(
																{},
																<<Set Size( 650 * RatioX, 272 * RatioY ),
																maxSelected( 1 )
															)
														)
													)
											
												)
											),
											Border Box( Top( 115 * RatioY ), Left( 40 ),
												V List Box(
													cbbox_FilterComparison = Combo Box(
														{"=", ">", "<", ">=", "<=", "Not Equal", "In", "Like", "Not Like"}, 
													
														Comparator = cbbox_FilterComparison << GetSelected();
														If( Comparator == "In",
															txt_sep << Visibility( "Visible" );
															txt_sep_edit << Visibility( "Visible" );
														,
															txt_sep_edit << Visibility( "Collapse" );
															txt_sep << Visibility( "Collapse" );
														);
													),
													Spacer Box( size( 10, 10 ) ),
													H List Box(
														txt_sep = Text Box( "Edit list separator: " ),
														Spacer Box( size( 10, 10 ) ),
														txt_sep_edit = Text Edit Box( "," )
													)
												)
											),
											Border Box( Left( 10 ),
												V List Box(
													Border Box( Top( 118 * RatioY ), Left( 30 ),
														txtFilter = Text Edit Box( "", <<Set Width( 180 ) )
													)
												
												)
											),
											V List Box(
												Border Box( Left( 40 ), Top( 118 * RatioY ),
													V List Box(
														Lineup Ruler Box(
															Widths( {200 * RatioX, 200 * RatioY} ),
															Lineup Box( N Col( 1 ),
																bttn_AddFilter = Button Box( "Add ", Eval( EXPR_ADD_FILTER ) ),
																Spacer Box( size( 10, 10 ) ),
																bttn_Preview = Button Box( "  Preview  ", Eval( EXPR_PREVIEW ) ),
																Spacer Box( size( 10, 10 ) ),
																bttn_Extraction2 = Button Box( "Run extraction", Eval( EXPR_DATA_EXTRACTION ) )
															)
														)
											
													)
												)
											
											)
										) 
								
									)
								), 

							), // End Outine box Add Filter
						
							Border Box( Top( 20 ),
								outline_FiltersRegistered = Outline Box( "Filter selection",
									V List Box(
										Border Box( Left( 15 ), Top( 15 ),
											cb_filter_condition = Combo Box(
												{"If ALL conditions are met", "If ANY conditions are met"}, 
												
												// Remove nested filters if the condition was changed
												Filters_AA_KEYS = Filters_AA << Get Keys();
												Ind_to_remove = List();

												For( i = N Items( Filters_AA_KEYS ), i >= 1, i = i - 1,
													If( Is List( Filters_AA[i][1] ),
														Insert Into( Ind_to_remove, i );
														lstFiltersRegistered << Remove Item( i );
													)
												);
												Remove From( Filters_AA, Ind_to_remove );
												// Decrease NextID
												NextID = N Items( Filters_AA ) + 1;
											)
										),
										H List Box(
											Border Box( Left( 15 ), Top( 15 ),
												lstFiltersRegistered = List Box( {}, <<Set Size( 1052 * RatioX, 200 * RatioY ) )
											),
											Border Box( Left( 40 ), Top( 60 ),
												V List Box(
													Lineup Ruler Box(
														Widths( {120 * RatioX, 200 * RatioY} ),
														Lineup Box( N Col( 1 ),
															bttn_Nest = Button Box( "      Nest       ",
																Try(
																	(lstFiltersRegistered << Get Selected)[1],
																	f_DialogError( "No filter selected" )
																);
																lst_FilterNested = lstFiltersRegistered << Get Selected;
																Indices_FilterNested = lstFiltersRegistered << Get Selected Indices;
														// Check if 2 filters selected
																If( N Items( lst_FilterNested ) != 2,
																	f_DialogError( "Select 2 filters to nest" )
																);
																Filter1 = Filters_AA[Indices_FilterNested[1]];
																Filter2 = Filters_AA[Indices_FilterNested[2]];
														// Check if the filters are not already nested
																If( Or( Is List( Filter1[1] ), Is List( Filter2[1] ) ),
																	f_DialogError( "Filter already nested" )
																);
																f_Log(
																	"INFO", "User nest the filters - " || Concat Items( lst_FilterNested, " AND " ),
																	section
																);
														// Add the nested filter in UI
																Condition = Match( cb_filter_condition << Get(), 1, "OR", 2, "AND" );
																str_FilterConcat = "(" || Char( Filter1[1] ) || " " || Char( Filter1[3][1] ) || " "
																 || Char( Filter1[3][2] ) || ")  " || Condition || "  (" || Char( Filter2[1] ) || " "
																 || Char( Filter2[3][1] ) || " " || Char( Filter2[3][2] ) || ")";
																str_FilterConcat2 = "(" || Char( Filter2[1] ) || " " || Char( Filter2[3][1] ) || " "
																 || Char( Filter2[3][2] ) || ")  " || Condition || "  (" || Char( Filter1[1] ) || " "
																 || Char( Filter1[3][1] ) || " " || Char( Filter1[3][2] ) || ")";
																lst_Filters = lstFiltersRegistered << Get Items();
																If(
																	Or(
																		Contains( lst_Filters, str_FilterConcat ),
																		Contains( lst_Filters, str_FilterConcat2 )
																	),
																	f_DialogError( "Filter already exist" ), 
															// Add the concatenated filter to the list of registered filters
																	lstFiltersRegistered << Append( str_FilterConcat );
															// Open the outline box with registered filters
																	outline_FiltersRegistered << Close( 0 );
																);
														// Create new filter with the 2 nested filters
																Filters_AA = f_NestFilters( Filters_AA, Indices_FilterNested, NextID );
														// Remove and re-order
																lstFiltersRegistered << Remove Selected;
																Filters_AA = f_ReorderAssociativeArray( Filters_AA, Indices_FilterNested );
														// Decrease NextID
																NextID = N Items( Filters_AA ) + 1;
															),
															Spacer Box( Size( 15, 15 ) ),
															bttn_RemoveFilter = Button Box( "   Remove    ", 
														//Log parameter
																section = "FILTER";

																Try(
																	(lstFiltersRegistered << Get Selected)[1],
																	f_DialogError( "No filter selected" )
																);
																lst_FilterRemoved = lstFiltersRegistered << Get Selected;
																f_Log(
																	"INFO",
																	"User removed the filter - " || Concat Items( lst_FilterRemoved, " AND " ),
																	section
																);
	
														// Remove from list of filters in UI
																ID_to_remove = lstFiltersRegistered << Get Selected Indices();
																lstFiltersRegistered << Remove Selected;
	
														// Remove from list of filters in algo
																Filters_AA = f_ReorderAssociativeArray( Filters_AA, ID_to_remove );
	
														// Decrease NextID
																NextID = N Items( Filters_AA ) + 1;
														//Show( Filters_AA );
															),
															Spacer Box( Size( 15, 15 ) ),
															bttn_RemoveAllFilters = Button Box( " Remove all ",
																lstFiltersRegistered << Remove All;
																NextID = 1;
																Filters_AA = Associative Array();
																f_Log( "INFO", "User removed all filters", "FILTER" );

															)
														)
													)
												)
											)
										)
									)
								)// End Outine box Filters Registered
							)
						)
					
					)
					
					
				)// End Tab Box Page "Tab Add Extraction Filters"
					
			) // End Tab box
	
				
		),
		Spacer Box( Size( 15, 15 ) ),
		H Center Box( Text Box( "Version " || Char( Version ) ) )
	)
); // End New  Window WiTag


/****************************************************
*  III. PARAMETERS
******************************************************/

// Adjust width
WinTag << Maximize Window( 1 );
NewWindowSize = WinTag << Get Window Size();
If( Or( NewWindowSize[1] != WindowSize[1], NewWindowSize[2] != WindowSize[2] ),
	f_Log( "INFO", "Update Window size, OLD - " || Char( WindowSize ) || " / NEW - " || Char( NewWindowSize ) );
	WindowSize = NewWindowSize;
	Save Text File( PathWindowSize, "WindowSize = " || Char( WindowSize ) );
	
);

	

// Set underline style for buttons
bttn_Round << Underline Style( 1 );
bttn_Now << Underline Style( 1 );
bttn_help << Underline Style( 1 );
// Set icons for buttons
bttn_AddTag << Set Icon( "Next" );
bttn_RemoveTag << Set Icon( "Prev" );
bttn_UpTag << Set Icon( "ListItemUp" );
bttn_DownTag << Set Icon( "ListItemDown" );
bttn_Extraction << Set Icon( "DebuggerRunWithoutBreakpoints" );
bttn_Extraction2 << Set Icon( "DebuggerRunWithoutBreakpoints" );


// Set minimum for the period value
PeriodValue << Set Minimum( 1 );

// Hide at Start application the panel with server adress
panel_ServerAdress << Visibility( "Collapse" );
PeriodPanel << Visibility( "Visible" );

// Hide checkbox to define list separator
txt_sep_edit << Visibility( "Collapse" );
txt_sep << Visibility( "Collapse" );

// Close Outline Filter registered
outline_FiltersRegistered << Close( 1 );

// Initialize the list box with the list of MES servers found in MES_servers_list.csv
lst_MES_servers << Append( MES_list );

	// Select first row of the list (default)
lst_MES_servers << Set Selected( 1 );




//Initialize the server details with the server informations of the first one in the data table
f_UpdateMESInfo( 1 );

//Recall server adress if it was edited in the last data extraction	
Try( ::was_edited, ::was_edited = 0 ); // Initialization at first run
If( ::was_edited == 1, 

	txtbox_ServerAddress << Set Text( ::MES_edit_recall );
	txtbox_ServerExtension << Set Text( ::ServerExtension_edit_recall );
	txtbox_Shortname << Set Text( ::ShortName_edit_recall );
	
	// UPdate radio box IP21 /PI
	If( ::ServerType_edit_recall == "IP21",
		rdbox_ServerType << set( 1 ),
		rdbox_ServerType << set( 2 )
	);

);
	
// Initialize Start Time and End Time

// Set date format
StartTime << Set Format( Format( "yyyy-mm-ddThh:mm:ss" ) );
EndTime << Set Format( Format( "yyyy-mm-ddThh:mm:ss" ) );

//in minutes
t_default_min = 10;
// in secondes
t_default_s = t_default_min * 60;

StartTime << set( Floor( Today() / t_default_s ) * t_default_s - 86400 ); // rounded date to 10 min
EndTime << set( Floor( Today() / t_default_s ) * t_default_s ); // rounded date to 10 min

// Sets periods to minutes in GUI by default
rdbox_PeriodUnits << Set( 2 );
