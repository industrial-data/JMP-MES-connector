/***********************************************************
 * General Information
 *
 * Script Title    : Launch Application
 *
 * Description:
 *
 * This is the main script which, when launched, loads all the other JSL scripts required, and opens the user interface.
 *
 ************************************************************/

/***********************************************************
 *                SCRIPT TABLE OF CONTENTS
 ************************************************************/

/****************************************************
 *  I. GLOBALS, PATH & FUNCTION
 *  II. USER INTERFACE 
 *  III. PARAMETERS
 ****************************************************/


/****************************************************


*                I. GLOBALS, PATH & FUNCTION


******************************************************/


Names Default To Here( 1 );
Set Preference( Use JMP Locale Settings( 1 ) );

Clear Log();
Print( "INFO:        START Script IP21PI Data Retrieval at " || Format( Today(), "d/m/y h:m:s" ) );

Print( "INFO:        JMP Version - " || Char( JMP Version() ) );

If( Host is( "Windows" ),
	Print( "INFO:        Windows system" )
);
If( Host is( "Mac" ),
	Print( "INFO:        Mac system" )
);

// --------------------------------- ADDIN-PATH --------------------------------- //

strPath = Get Path Variable( "ADDIN_HOME(MES.Data.Retrieval.OS2.2)" ); //PROD




// --------------------------------- CONFIGURATION AND DEPENDENCIES --------------------------------- //

Include( strPath || "config/config.jsl" );
Print( "INFO:        Add-in Version - " || Char( Version ) );


/* Source dependencies files needed */
ps_path = Convert File Path( strPath || "doc/external/OLEDB_extract.ps1", windows );
lstDependencies = Files In Directory( strPath || "include/", "recursive" );
For( i = 1, i <= N Items( lstDependencies ), i++,
	Include( strPath || "include/" || lstDependencies[i] )
);


// --------------------------------- SERVER LIST --------------------------------- //

strPathServerlist = "https://raw.githubusercontent.com/industrial-data/JMP-MES-connector/refs/heads/main/MES_servers_list.csv";

/* Source file with list of servers */
Try(
	dt_MES_servers = Eval(
		Eval Expr(
			Open(
				strPathServerlist,
				Import Settings(
					End Of Line( CRLF, CR, LF ),
					End Of Field( Other( ";" ), CSV( 0 ) ),
					Strip Quotes( 1 ),
					Use Apostrophe as Quotation Mark( 0 ),
					Use Regional Settings( 0 ),
					Scan Whole File( 1 ),
					Treat empty columns as numeric( 0 ),
					CompressNumericColumns( 0 ),
					CompressCharacterColumns( 0 ),
					CompressAllowListCheck( 0 ),
					Labels( 1 ),
					Column Names Start( 1 ),
					Data Starts( 2 ),
					Lines To Read( "All" ),
					Year Rule( "20xx" )
				),
				strTableVisibility;
			)
		)
	),
	f_DialogError( "Server connection failed" )
);

If( N Rows( dt_MES_servers ) == 0,
	f_DialogError( "Empty servers list" )
);

/* Add columns "JMP_list"" and "NetworkNode" */
dt_MES_servers << New Column( "JMP_list",
	"Character",
	Formula( :zone || " - " || :site || " (" || :atelier || ") " || " [" || :Type || "]" || " - " || :ShortName )
);
dt_MES_servers << New Column( "NetworkNode", "Character", Formula( If( :extension != "", :DirectoryHost || "." || :extension, :DirectoryHost ) ) );


/* Sort the servers list by JMP_list column name */
dt_MES_servers << Sort( By( :JMP_list ), Replace Table, Order( Ascending ), Copy formula( 0 ) );




/* Retrieve the values from MES Servers list data Table */
AA.ServersInfo = Associative Array();

For( i = 1, i <= N Rows( dt_MES_servers ), i++, 

	Eval(
		Eval Expr(
			AA.ServersInfo[Expr(
				Column( dt_MES_servers, "JMP_list" )[i]
			)] = Associative Array(
				List(
					List( "Site", Expr( Column( dt_MES_servers, "site" )[i] ) ),
					List( "Type", Expr( Column( dt_MES_servers, "Type" )[i] ) ),
					List( "URL", Expr( Column( dt_MES_servers, "DirectoryHost" )[i] ) ),
					List( "ShortName", Expr( Column( dt_MES_servers, "ShortName" )[i] ) ),
					List( "NetworkNode", Expr( Column( dt_MES_servers, "NetworkNode" )[i] ) ),
					List( "Extension", Expr( Column( dt_MES_servers, "extension" )[i] ) )
				)
			)

		)
	)
	
);

StrTagName = "";
StrTagDesc = "";

Close( dt_MES_servers, NoSave );


// --------------------------------- LIST INITIALIZATION--------------------------------- //


// Associative Array with the tag with [KEYS]/Without unit description [VALUE]
TagSelect_AA = Associative Array();

// Initialize the associative array with all filters (empty for the moment because there is no filters)
Filters_AA = Associative Array(); //[KEY: ID, corresponds to the order of appearance in the list of filters] [VALUE: 1- Tagname with unit/descr (str) / 2- Tag Type (str) / 3- Filters (list of list)]
TagType_AA = Associative Array(); //[KEY:Tagname with unit/descr (str)] [VALUE: 1- Tag Type (str) ]
NextID = 1;

/* By default, no workflow is selected */
strWorkflowPath == "";

														
/****************************************************


*                II. USER INTERFACE


******************************************************/


// Screen dimensions: We adjust the GUI depending on the user's screen window
DevX = 1536;
DevY = 874;
ScreenX = WindowSize[1];
ScreenY = WindowSize[2];
RatioX = ScreenX / DevX;
RatioY = ScreenY / DevY;

// Tab's title
TitleTab1 = "." || Repeat( " ", 90 * RatioX ) || "Data Extraction Details" || Repeat( " ", 90 * RatioX ) || ".";
TitleTab2 = "." || Repeat( " ", 106 * RatioX ) || "Filter" || Repeat( " ", 106 * RatioX ) || ".";

// GUI
WinTag = New Window( "IP21PI Data Retrieval",
	V List Box(
		H List Box(
			V Center Box(
				Border Box( Left( 520 * RatioX ),
					H List Box(
						Text Box(
							"<font color=\!"#059fe0\!"> MES Data Retrieval",
							<<markup,
							<<SetFontSize( 16 ),
							<<Set Font( "Century Gothic" ),
							<<Set Font Style( "Bold" )
						),
						Spacer Box( Size( 600 * RatioX, 0 ) ), 
						
						// --------------------------------- HELP - USER GUIDE --------------------------------- //
						
						bttn_help = Button Box( "Help",
							If( Starts With( strPathHelpDoc, "/" ),
								strPathHelpDoc = Right( strPathHelpDoc, Length( strPathHelpDoc ) - 1 )
							);
							/* It will try to open the user guide of the add-in using user's default open file application (Adobe, Word...) */
							f_openFileInOSDefault( strPathHelpDoc );
						)
					)
				)
			)
		),
		Border Box( Left( 10 * RatioX ), top( 20 ),
			Tab Box(
			
						// =================================   TAB1 : DATA EXTRACTION DETAILS ================================= //

				Tab Page Box(
					TitleTab1,
					Icon( "SASFolders" ),
					H List Box(
						Border Box( Left( 10 ), Top( 20 ), 
						
						// --------------------------------- SELECTION OF SERVER --------------------------------- //

							Outline Box( "Server",
								Panel Box( "",
									H List Box(
										Border Box( top( 10 ), Left( 15 ), Icon Box( "SearchIndex" ) ),
										Spacer Box( size( 5, 10 ) ), 
											
										Border Box( top( 10 ), Left( 15 ),
											txt_SearchBarServer = Text Edit Box( "",
												<<set width( 290 * RatioX ),
												<<set text changed( f_SearchBarServer )
											)
										),
										Border Box( top( 8 ), Left( 15 ),
											bttn_ResetSearchServer = Button Box( "",
												<<set icon( "DebuggerDeleteBreakpoint" ),
												<<set script(
													txt_SearchBarServer << set text( "" );
													f_SearchBarServer( txt_SearchBarServer, "" );
												),
												<<set tip( "Clear filter" ), 

											)
										)
									),
									Border Box( top( 15 ), Left( 15 ),
										lst_MES_servers = List Box(
											{},
											width( 500 * RatioX ),
											max selected( 1 ),
											nlines( 10 ), 
											/* When user select a MES we update the informations displayed */
											Try( f_UpdateMESInfo() )
										)
									), 
									
							// --------------------------------- EDIT SERVER ADRESS --------------------------------- //
							
									Border Box( top( 10 ), Left( 15 ),
										chkbox_edit_adress = Check Box(
											{"Edit server address"},
											is_checked = chkbox_edit_adress << Get();
											/* If the option "edit server adress" is checked, then we show the hidden panel containing box to edit server adress*/
											If( is_checked == 1,
												panel_ServerAdress << Visibility( "Visible" ),
												panel_ServerAdress << Visibility( "Collapse" )
											);
										)
									),
									Border Box( top( 10 ), Left( 15 ),
										Lineup Ruler Box(
											Widths( {120 * RatioX, 200 * RatioY} ),
											panel_ServerAdress = Outline Box( "Server details",
												Panel Box( "",
													Lineup Box( N Col( 2 ),
														Text Box( "Address:" ),
														txtbox_ServerAddress = Text Edit Box( "" ),
														Text Box( "Extension:" ),
														txtbox_ServerExtension = Text Edit Box( "" ),
														Text Box( "Shortname:" ),
														txtbox_Shortname = Text Edit Box( "" ),
														rdbox_ServerType = Radio Box(
															{"IP21", "PI"}, 
															/* If user changes server type, all filters registered will be removed as they are built differently between IP21 and PI */
															f_DialogWarning( "All filters removed" );
															lstFiltersRegistered << Remove All;
															Filters_AA = Associative Array();
															NextID = 1;
														)
													)
												)
											)
										)
									),
									Border Box( top( 15 ), Left( 15 ), Bottom( 8 ),
										Lineup Box( N Col( 3 ),
											Text Box( "Name data file:" ),
											Spacer Box( Size( 15, 15 ) ), 
											/* Name of the output table, containing extracted data */
											txt_TableName = Text Edit Box( "", <<Set Width( 180 * RatioX ) )
										)
									)
								)
							) // END Outline box Server
						), 
						
						// --------------------------------- TAG SEARCH --------------------------------- //
						
						Border Box( top( 20 ), Left( 15 ),
							V List Box(
								Outline Box( "Tag search",
									Panel Box( "",
										Lineup Ruler Box(
											Widths( {120 * RatioX, 200 * RatioY} ),
											Lineup Box( N Col( 2 ), spacing( 10 ),
												Text Box( "Tagname:" ),
												txtbox_TagName = Text Edit Box( "" ),
												Text Box( "Description:" ),
												txtbox_TagDesc = Text Edit Box( "" )
											)
										),
										V Center Box(
											Button Box( "Find tags", 
											
												/* Test if at least 1 server is selected */
												Try( selected_MES = (lst_MES_servers << Get Selected)[1], f_DialogError( "No server selected" ) );
												
												
												/* Get server informations */
												is_checked = chkbox_edit_adress << Get();
												MES = txtbox_ServerAddress << Get Text;
												ServerExtension = txtbox_ServerExtension << Get Text;
												ShortName = txtbox_Shortname << Get text;
												ServerType = rdbox_ServerType << Get Selected;
												f_CheckMESInfo( MES, ServerExtension, ServerType, ShortName, is_checked );

												/* This server should be pre-selected in the future */
												Save Text File(
													str.PathLastServerSelected,
													Eval Insert(
														"Recall.LastServerSelected = \!"^selected_MES^\!";Recall.LastServerEdited=^is_checked^;Recall.MES = \!"^MES^\!";Recall.Extension = \!"^ServerExtension^\!";Recall.ShortName = \!"^ShortName^\!";Recall.ServerType = \!"^ServerType^\!";"
													)
												);

		
												/* Check if server adress was edited by the user */
												If( is_checked == 1,
													NetworkNode = Char( MES ) || "." || Char( ServerExtension );
													f_Log( "INFO", "User has edited the server address - " || NetworkNode );
												);
												Eval( f_button.find_tags );
											)
										)
									)
								)
							)
						),
						V List Box(
							Border Box( top( 20 ), Left( 15 ), 
							
							// --------------------------------- START / END TIME --------------------------------- //
							
								Outline Box( "Start/End time",
									Panel Box( "",
										Lineup Box( N Col( 3 ), spacing( 10 ),
											Text Box( "Start time:" ),
											StartTime = Number Edit Box( 0 ),
											bttn_Round = Button Box( "Round",
												Start = StartTime << get();
												PeriodNumVal = PeriodValue << Get;
												PeriodUnits = rdbox_PeriodUnits << Get Selected;
												NewStartTime = f_UpdateDate( Start, PeriodNumVal, PeriodUnits );
												StartTime << set( NewStartTime );
											),
											Text Box( "End time:" ),
											EndTime = Number Edit Box( 0 ),
											bttn_Now = Button Box( "Now",
												PeriodNumVal = PeriodValue << Get;
												PeriodUnits = rdbox_PeriodUnits << Get Selected;
												NewendTime = f_UpdateDate( Today(), PeriodNumVal, PeriodUnits );
												EndTime << set( NewendTime );
											)
										),
										Lineup Box( N Col( 5 ), spacing( 10 ),
											Border Box( Top( 4 ), Text Box( "Adjust Dates" ) ),
											cbbx.period_selection = Combo Box(
												{"1 Week", "2 Weeks", "1 Month", "3 Months", "6 Months", "12 Months"}
											),
											Border Box( Top( 4 ), Text Box( " from " ) ),
											cbbx.starting_point_period_selection = Combo Box( {"Start date", "End date"} ),
											Border Box( Top( 2 ),
												bttn.apply_selected_period = Button Box( "Apply",
													str.period_selection = cbbx.period_selection << Get selected();
													str.starting_point_period_selection = cbbx.starting_point_period_selection << Get selected();
													f_SetPeriodRange( str.period_selection, str.starting_point_period_selection );
												)
											)
										)
									)
								)
							), 
							
							// --------------------------------- OTHER OPTIONS (WORKFLOW, SUMMARY ...)--------------------------------- //
							
							Border Box( top( 20 ), Left( 15 ),
								Outline Box( "Options",
									Panel Box( "",
										Lineup Ruler Box(
											Widths( {140 * RatioX, 150 * RatioY} ),
											Border Box( Left( 15 ), Right( 15 ),
												Lineup Box( N Col( 2 ), spacing( 15 ),
													Text Box( "Compute summary table:" ),
													OptSummary = Check Box( {""} ),
													Text Box( "Workflow:" ),
													bttnWorkflow = Button Box( "Select file", 
												 	
												 	/* By default, no workflow is selected */
														strWorkflowPath == "";
												 	
												 	/* Open Windows file explorer, so that user can select a workflow file. By default, the path is DOCUMENTS */
														strWorkflowPath = Pick File(
															"Select Workflow File",
															"$DOCUMENTS",
															{"JMP Files|jmpflow"},
															1,
															0
														);
													
													/* Get selected workflow name */
														strWorkflowName = Word( -1, strWorkflowPath, "/" );
														If( strWorkflowPath != "",
															bttnWorkflow << Set Button Name( strWorkflowName ),
															bttnWorkflow << Set Button Name( "Select file" )
														);
													)
												)
											)
										)
									)
								)
							)
						)
					), // End H List Box
					
					// --------------------------------- TAG SELECTION --------------------------------- //
					Border Box( Left( 10 ), Top( 20 ),
						H List Box(
							Outline Box( "Tag selection",
								H List Box(
									V List Box(
										Border Box( Top( 15 ), Bottom( 5 ), Left( 4 ),
											Lineup Box( N Col( 2 ), Text Box( "Available tags" ), txtbox_nbTags = Text Box( " >>>" ) )
										),
										H List Box(
							
											Border Box( top( 2 ), Icon Box( "SearchIndex" ) ),
											Spacer Box( size( 5, 10 ) ), 
											
											Border Box( top( 2 ),
												txt_SearchBarTag = Text Edit Box( "",
													<<set width( 550 * RatioX ),
													<<set text changed( f_SearchBarTag )
												)
											),
											bttn_ResetSearchTag = Button Box( "",
												<<set icon( "DebuggerDeleteBreakpoint" ),
												<<set script(
													txt_SearchBarTag << set text( "" );
													f_SearchBarTag( txt_SearchBarTag, "" );
												),
												<<set tip( "Clear filter" ), 

											)
										),
										Border Box( Left( 26 ), lstAvailableTags = List Box( {}, <<Set Size( 550 * RatioX, 272 * RatioY ) ) )
					
									),
									V List Box(
										Border Box( Top( 145 * RatioY ), Right( 10 ), Left( 10 ),
											bttn_AddTag = Button Box( "", 
								
												selected_tags = lstAvailableTags << GetSelected;
								
												/* Check if at least one of the selected tag was already selected before */ 
												If( N Items( selected_tags ) > 0, 
												
													For( k = N Items( selected_tags ), k >= 1, k--, 
													
														TagToAdd = selected_tags[k];
														indTag = As List( Loc( TagList_DescUnit, TagToAdd ) )[1];
														TagToAdd_NO_desc_units = tag_NO_desc_units_list[indTag];
														
														// Check if it was already added
														TagToAdd_NOTYPE = f_RemoveSuffixFromWord( TagToAdd, AllTypes );
														TagSelect_AA_KEYS = TagSelect_AA << get keys;
														If( !Contains( TagSelect_AA_KEYS, TagToAdd_NOTYPE ),
															If( !Contains( TagSelect_AA_KEYS, TagToAdd_NO_desc_units ), 
															
																TagSelect_AA[TagToAdd_NOTYPE] = TagToAdd_NO_desc_units
															, 
																
																f_DialogWarning( "Tag " || Char( selected_tags[k] ) || " already exists" );
																Remove From( selected_tags, k );
															)
														);
													);
													
												);
												
												/* Update list of selected tags in both tabs */
												lstbox_SelectedTags << Append( selected_tags );
												lstbox_SelectedTags2 << Append( selected_tags );
												
												/* Update number of selected tags */
												n_selected = N Items( lstbox_SelectedTags << Get Items() );
												Try(
													If( n_selected == 0,
														txtbox_nbSelectTags << Set Text( "" ),
														txtbox_nbSelectTags << Set Text( " [ " || Char( n_selected ) || " ]" )
													) 

												);
												
											)
										),
										Border Box( Right( 10 ), Left( 10 ),
											bttn_RemoveTag = Button Box( "", 
								
												/* Check if at least 1 tag to be removed was used for a filter. In this case, we remove also the filter */
												Try(
													tags_to_remove = lstbox_SelectedTags << Get selected();
													For( i = 1, i <= N Items( tags_to_remove ), i++,
														TagToRemove = tags_to_remove[i];
														TagToRemove_NOTYPE = f_RemoveSuffixFromWord( TagToRemove, AllTypes );
														TagSelect_AA << Remove( TagToRemove_NOTYPE );
														
														If( N Items( Filters_AA << get keys ) > 0, 
														
															indToRemove = List();

															For Each( {{key, value}, index}, Filters_AA, 
					
																If(
																	Or(
																		Contains( TagToRemove, Char( value[1] ) ),
																		Try(
																			And(
																				Contains( TagToRemove, Char( value[1][1] ) ),
																				Char( value[1] ) != "."
																			)
																		),
																		Try(
																			And(
																				Contains( TagToRemove, Char( value[1][2] ) ),
																				Char( value[2] ) != "."
																			)
																		)
																	),
																	Insert Into( indToRemove, key )
																)
															);
														
														// Remove from list of filters in UI
															For( j = N Items( Filters_AA << get keys ), j >= 1, j = j - 1,
																If( Contains( indToRemove, j ),
																	lstFiltersRegistered << Remove Item( j )
																)
															);
															
														// Remove from list of filters in algo
															Filters_AA = f_ReorderAssociativeArray( Filters_AA, indToRemove );
															NextID = N Items( Filters_AA ) + 1;
														
														
														);
														
													);
												);
												
									/* Update list of tags selected in both  tabs */
												lstbox_SelectedTags << Remove Selected;
												lstbox_SelectedTags2 << Remove All;
												lstbox_SelectedTags2 << Append( lstbox_SelectedTags << Get Items() );
									
									/* Update number of tags selected */
												n_selected = N Items( lstbox_SelectedTags << Get Items() );
												Try(
													If( n_selected == 0,
														txtbox_nbSelectTags << Set Text( "" ),
														txtbox_nbSelectTags << Set Text( " [ " || Char( n_selected ) || " ]" )
													)
												);
						
											)
										)
									),
									V List Box(
										Border Box( Top( 20 ),
											Lineup Box( N Col( 2 ), Text Box( ">>> Selected tags" ), txtbox_nbSelectTags = Text Box( " " ) )
										),
										Border Box( Top( 18 ), Left( 2 ),
											lstbox_SelectedTags = List Box( {}, <<Set Size( 550 * RatioX, 272 * RatioY ) )
										),
										Lineup Box( N Col( 3 ),
											bttn_RemoveAll = Button Box( " Remove all ",
												lstbox_SelectedTags << Remove All;
												lstbox_SelectedTags2 << Remove All;
												lstFiltersRegistered << Remove All;
												txtbox_nbSelectTags << Set Text( "" );
												
												/* If we remove all tags, then we also remove all potential filters registered by the user */
												TagSelect_AA = Associative Array();
												Filters_AA = Associative Array();
												NextID = 1;
											),
											bttn_PasteTag = Button Box( "Paste",
												copiedtags = Get Clipboard();
												
												/* Get rid of carriage / return to line ... */
												copiedtaglist = Words( copiedtags, "\!t\!r\!n" );
												
												/* Check for duplicates */
												unique_copiedtaglist = List();
												For( i = 1, i <= N Items( copiedtaglist ), i++,
													txt_copied = Trim( Char( copiedtaglist[i] ) );
													If( !(Contains( unique_copiedtaglist, txt_copied )),
														Insert Into( unique_copiedtaglist, txt_copied )
													);
												);
												
												/* Check if at least 1 tag was already added */
												For( i = 1, i <= N Items( unique_copiedtaglist ), i++,
													TagToAdd = unique_copiedtaglist[i];
													list = TagSelect_AA << get values;
													If( !(Contains( list, TagToAdd )),
														TagSelect_AA[TagToAdd] = TagToAdd;
														lstbox_SelectedTags << Append( TagToAdd );
														lstbox_SelectedTags2 << Append( TagToAdd );
													,
														f_DialogWarning( "Tag " || Char( TagToAdd ) || " already exists" )
													);
													
												);
												
												/* Update number of selected tags */
												n_selected = N Items( lstbox_SelectedTags << Get Items() );
												Try(
													If( n_selected == 0,
														txtbox_nbSelectTags << Set Text( "" ),
														txtbox_nbSelectTags << Set Text( " [ " || Char( n_selected ) || " ]" );

													)
												);
									
											), 
											// --------------------------------- LOAD REPORT --------------------------------- //
						
											bttn.load_report = Button Box( "  Load report  ", 
												
												section = "REPORT";
												
												str.PathReport2Load = Pick File(
													"Select Report",
													If( Directory Exists( str.PathReport ),
														str.PathReport,
														"$DOCUMENTS"
													),
													{"JMP Files|jmp"},
													1,
													0
												);
												
												If( str.PathReport2Load != "", 
												
													f_Log( "INFO", "User loads report : " || str.PathReport2Load , section);
													tbl.Report2Load = Open( str.PathReport2Load, "invisible" );
													lst.ReportColumns = tbl.Report2Load << Get column Names( "String" );
													
													// Check if all required columns for report are present in the table
													int.CheckReport = f_CheckAllElementsPresent( lst.RequiredReportColumns, lst.ReportColumns );
													If( int.CheckReport == 0,
														f_DialogError( "Missing required column(s) for report" )
													);
												
													// Get report informations
													Try(
														str.MESFullName = Column( tbl.Report2Load, "MES - DESCRIPTION" )[1];
														str.MES = Column( tbl.Report2Load, "MES" )[1];
														str.ServerExtension = Column( tbl.Report2Load, "SERVER EXTENSION" )[1];
														str.ShortName = Column( tbl.Report2Load, "SERVER SHORTNAME" )[1];
														str.ServerType = Column( tbl.Report2Load, "SERVER TYPE" )[1];
														int.ServerEdited = Num( Column( tbl.Report2Load, "SERVER EDITED" )[1] );
														lst.Columns2Extract = Column( tbl.Report2Load, "TAGS" ) << Get values;
														For( i = N Items( lst.Columns2Extract ) + 1, i = i - 1, i >= 1,
															column_i = lst.Columns2Extract[i];
															If( column_i == "",
																Remove From( lst.Columns2Extract, i )
															);
														);
														str.extraction_method = Column( tbl.Report2Load, "EXTRACTION METHOD" )[1];
														int.period_value = Num( Column( tbl.Report2Load, "PERIOD VALUE" )[1] );
														str.period_unit = Column( tbl.Report2Load, "PERIOD UNIT" )[1];

														str.StartDate = Column( tbl.Report2Load, "START DATE" )[1];
														str.EndDate = Column( tbl.Report2Load, "END DATE" )[1];
														lst.filters_registered = Column( tbl.Report2Load, "FILTERS" ) << Get values;
														For( i = N Items( lst.filters_registered ) + 1, i = i - 1, i >= 1,
															filter_i = lst.filters_registered[i];
															If( filter_i == "",
																Remove From( lst.filters_registered, i )
															);
														);

														Filters_AA = f_Filters_List2AA( lst.filters_registered, lst.Comparators );
														NextID = N Items( lst.filters_registered ) + 1;
														str.condition4filter = Column( tbl.Report2Load, "CONDITION FILTERS" )[1];
														int.OptSummary = Num( Column( tbl.Report2Load, "SUMMARY OPTION" )[1] );
														strWorkflowPath = Column( tbl.Report2Load, "WORKFLOW OPTION" )[1];
														
													,
														f_DialogError( "Error while loading report" )
													);
													
													
													Close( tbl.Report2Load, NoSave );
													
													// Set report informations
/* Table */
													Try(
														
														// Server
														lst.sorted_tables = AA.ServersInfo << get keys;
														Remove From( lst.sorted_tables, Loc( lst.sorted_tables, str.MESFullName )[1] );
														Insert Into( lst.sorted_tables, str.MESFullName, 1 );
														lst_MES_servers << Remove All;
														lst_MES_servers << Append( lst.sorted_tables );
														lst_MES_servers << Set Selected( 1 );
														f_UpdateMESInfo();
														If( int.ServerEdited == 1,
															txtbox_ServerAddress << set Text( str.MES );
															txtbox_ServerExtension << set Text( str.ServerExtension );
															txtbox_Shortname << set text( str.ShortName );
															Match( str.ServerType,
																"IP21", rdbox_ServerType << set( 1 ),
																rdbox_ServerType << set( 2 )
															);
															chkbox_edit_adress << set( 1 );
															panel_ServerAdress << Visibility( "Visible" );
														);														
														
														
													,
														f_DialogError( "Invalid server value in report" )
													);
													
													
													/* TAG SELECTION */
													lstbox_SelectedTags << Remove All;
													lstbox_SelectedTags2 << Remove All;
													lst.ColumnsAlreadyAdded = List();
													For( i = 1, i <= N Items( lst.Columns2Extract ), i++,
														str.Column = Trim( Char( lst.Columns2Extract[i] ) );
														If(
															And(
																!Contains( lst.ColumnsAlreadyAdded, str.Column ),
																!Contains( lst.ColumnsAlreadyAdded, Trim( lst.Columns2Extract[i] ) )
															), 

															lstbox_SelectedTags << Append( lst.Columns2Extract[i] );
															lstbox_SelectedTags2 << Append( lst.Columns2Extract[i] );
															TagSelect_AA[str.Column] = str.Column;
															lst.ColumnsAlreadyAdded = lstbox_SelectedTags << Get Items();
														,
															f_DialogWarning(
																"Column '" || Char( str.Column ) || "' already added or incorrect value"
															)
														);
													
													);
													
													txtbox_nbSelectTags << Set Text(
														" [ " || Char( N Items( lstbox_SelectedTags << get items ) ) || " ]"
													);

													/* START/END TIME */
													StartTime << Set( Informat( str.StartDate ) );
													EndTime << Set( Informat( str.EndDate ) );
													
													/* EXTRACTION */
													Try(
														Match( str.extraction_method,
															"Interpolated",
																rdbox_Method << Set( 1 );
																PeriodPanel << Visibility( "Visible" );,
															"Average",
																rdbox_Method << Set( 2 );
																PeriodPanel << Visibility( "Visible" );,
															"Actual",
																rdbox_Method << Set( 3 );
																PeriodPanel << Visibility( "Collapse" );
														);
														PeriodValue << Set( int.period_value );
														Match( str.period_unit,
															"Second", rdbox_PeriodUnits << Set( 1 ),
															"Minute", rdbox_PeriodUnits << Set( 2 ),
															"Hour", rdbox_PeriodUnits << Set( 3 ),
															"Day", rdbox_PeriodUnits << Set( 4 )
														);
														
													,
														f_DialogError( "Invalid extraction parameters values in report" )
													);
													
													/* FILTERS */
													
													If( Trim( str.condition4filter ) == "OR",
														cb_filter_condition << Set( 2 ),
														cb_filter_condition << Set( 1 )
													);
													lstFiltersRegistered << Remove all();
													lstFiltersRegistered << Append( lst.filters_registered );
													outline_FiltersRegistered << Close( 0 );
													
													/* OPTIONS */
													
													Try(
														OptSummary << Set( 1, int.OptSummary ),
														f_DialogError( "Invalid Summary option value in report" )
													);
													
													
													If( strWorkflowPath != "",
														str.workflow_file_name = Word( -1, strWorkflowPath, "/" );
														bttnWorkflow << Set Button Name( str.workflow_file_name );
													,
														bttnWorkflow << Set Button Name( "Select file" )
													);


												);
												
											)
					
										)

									),
									V List Box(
										Border Box( Left( 10 ), Top( 145 * RatioY ),
											bttn_UpTag = Button Box( "",
												lstTag_tochange = lstbox_SelectedTags << Get Items();
												Tags_tomove = lstbox_SelectedTags << GetSelected();
												If( N Items( Tags_tomove ) > 0, 
													
													/* Re-order tags */
													lstTag_tochange = f_MoveUp( lstTag_tochange, Tags_tomove );
													
													/* Update with re-ordered selection */
													lstbox_SelectedTags << Remove All;
													lstbox_SelectedTags2 << Remove All;
													lstbox_SelectedTags << Append( lstTag_tochange );
													lstbox_SelectedTags2 << Append( lstTag_tochange );

													/* Recall which tags were selected */
													For( i = 1, i <= N Items( Tags_tomove ), i++,
														lstbox_SelectedTags << Set selected( Contains( lstTag_tochange, Tags_tomove[i] ) )
													);
												);

											)
										),
										Border Box( Left( 10 ),
											bttn_DownTag = Button Box( "",
												lstTag_tochange = lstbox_SelectedTags << Get Items();
												Tags_tomove = lstbox_SelectedTags << GetSelected();
												If( N Items( Tags_tomove ) > 0, 
													
													/* Re-order tags */
													lstTag_tochange = f_MoveDown( lstTag_tochange, Tags_tomove );
													
													/* Update with re-ordered selection */
													lstbox_SelectedTags << Remove All;
													lstbox_SelectedTags2 << Remove All;
													lstbox_SelectedTags << Append( lstTag_tochange );
													lstbox_SelectedTags2 << Append( lstTag_tochange );

													/* Recall which tags were selected */
													For( i = 1, i <= N Items( Tags_tomove ), i++,
														lstbox_SelectedTags << Set selected( Contains( lstTag_tochange, Tags_tomove[i] ) )
													);
												);
											)
										)
									)
								)
							), 
							
							// --------------------------------- EXTRACTION METHOD --------------------------------- //
							
							Outline Box( "Extraction",
								V List Box(
									Lineup Ruler Box(
										Widths( {120 * RatioX, 200 * RatioY} ),
										Lineup Box( N Col( 1 ), Spacing( 10 ),
											Panel Box( "Method",
												rdbox_Method = Radio Box(
													{"Interpolated", "Average", "Actual"}, 

													method_selected = rdbox_Method << Get();
													
													/* If "Actual" method is selected (id 3), then there is no need to select a period value, so we hide period panel */
													If( method_selected == 3,
														PeriodPanel << Visibility( "Collapse" ),
														PeriodPanel << Visibility( "Visible" )
													);
												)
											), 
									
											PeriodPanel = Panel Box( "Period",
												PeriodValue = Number Edit Box( 10 ),
												rdbox_PeriodUnits = Radio Box( {"Second", "Minute", "Hour", "Day"} )
											)
										)
									), 
								
								// --------------------------------- RUN EXTRACTION --------------------------------- //
								
									Lineup Ruler Box(
										Widths( {200 * RatioX, 200 * RatioY} ),
										Lineup Box( N Col( 1 ), Spacing( 10 ),
											bttn_Extraction = Button Box( "Run extraction", Eval( EXPR_DATA_EXTRACTION ) ),
											bttn.save_report = Button Box( "  Save report  ", 
											 
										// --------------------------------- SAVE REPORT --------------------------------- //
				 
												section = "REPORT";
												
												/* Server Information */
												Try( str.server = (lst_MES_servers << Get Selected())[1], f_DialogError( "No server selected" ) );
												int.EditAdress = chkbox_edit_adress << Get();
												str.MESFullName = (lst_MES_servers << Get Selected)[1];
												str.MES = txtbox_ServerAddress << Get Text;
												str.ServerExtension = txtbox_ServerExtension << Get Text;
												str.ShortName = txtbox_Shortname << Get text;
												str.ServerType = rdbox_ServerType << Get Selected;
												If( int.EditAdress == 1,
													str.NetworkNode = Char( str.MES ) || "." || Char( str.ServerExtension )
												);
												
												/* Get Tags ordered */
												lst.Tags2Extract = lstbox_SelectedTags << Get Items();
												If( N Items( lst.Tags2Extract ) == 0,
													f_DialogError( "No tag(s) selected" )
												);
												lst.Tags2Extract = f_Remove_UnitDescription( lst.Tags2Extract, TagSelect_AA ); // Remove unit/description from tagname, if any
												
												
/* Extraction Information */
												str.ExtractionMethod = rdbox_Method << Get Selected();
												str.PeriodNumValue = Char( PeriodValue << Get() );
												str.PeriodUnits = rdbox_PeriodUnits << Get Selected();
												int.Start = StartTime << Get();
												int.End = EndTime << Get();
												
	
												/* Filters */
												lst.filters_registered = lstFiltersRegistered << Get Items();
												str.condition4filter = Match( cb_filter_condition << Get(), 1, "AND", 2, "OR" );
												
												/* Options */
												str.OptSummary = Char( OptSummary << Get() );
												
												
												/* Report Name */
												str.PathReportName = Pick File(
													"Save report",
													str.PathReport,
													{"JMP Files|jmp", "All Files|*"},
													1,
													1,
													"ReportName.jmp"
												);
												
												
												
												// Get onyl report name
												str.ReportName = Word( -1, str.PathReportName, "/" );
												str.PathReportName = Substitute( str.PathReportName, str.ReportName, "" );
												str.ReportName = Left( str.ReportName, Contains( str.ReportName, "." ) - 1 );

												If( Trim( str.ReportName ) != "", 
			
												// Create report associated JMP table (hidden)
													Eval(
														Eval Expr(
															tbl.Report2Save = New Table( Expr( str.ReportName ),
																New Column( "MES - DESCRIPTION", Character, Set Values( {Expr( str.MESFullName )} ) ),
																New Column( "MES", Character, Set Values( {Expr( str.MES )} ) ),
																New Column( "SERVER EXTENSION",
																	Character,
																	Set Values( {Expr( str.ServerExtension )} )
																),
																New Column( "SERVER SHORT NAME", Character, Set Values( {Expr( str.ShortName )} ) ),
																New Column( "SERVER TYPE", Character, Set Values( {Expr( str.ServerType )} ) ),
																New Column( "SERVER EDITED",
																	Character,
																	Set Values( {Expr( Char( int.EditAdress ) )} )
																),
																New Column( "TAGS", Character, Set Values( Expr( lst.Tags2Extract ) ) ),
																New Column( "EXTRACTION METHOD",
																	Character,
																	Set Values( {Expr( str.ExtractionMethod )} )
																),
																New Column( "PERIOD VALUE", Character, Set Values( {Expr( str.PeriodNumValue )} ) ),
																New Column( "PERIOD UNIT", Character, Set Values( {Expr( str.PeriodUnits )} ) ),
																New Column( "START DATE",
																	Character,
																	Set Values( {Expr( Char( Format( int.Start, "yyyy-mm-ddThh:mm:ss" ) ) )} )
																),
																New Column( "END DATE",
																	Character,
																	Set Values( {Expr( Char( Format( int.End, "yyyy-mm-ddThh:mm:ss" ) ) )} )
																),
																New Column( "FILTERS", Character, Set Values( Expr( lst.filters_registered ) ) ),
																New Column( "CONDITION FILTERS",
																	Character,
																	Set Values( {Expr( str.condition4filter )} )
																),
																New Column( "SUMMARY OPTION", Character, Set Values( {Expr( str.OptSummary )} ) ),
																New Column( "WORKFLOW OPTION", Character, Set Values( {Expr( strWorkflowPath )} ) ),
																"invisible"
															)
														)
													);
												
													Column( tbl.Report2Save, "TAGS" ) << Set Display Width( 300 );
													Column( tbl.Report2Save, "FILTERS" ) << Set Display Width( 300 );
												
													f_Log( "INFO", "User saved report : " || Char( str.PathReport ) || Char( str.ReportName ), section );
												
												// Save report
													f_SaveReport( tbl.Report2Save, str.ReportName, str.PathReportName );
													Close( tbl.Report2Save, NoSave );
													
												);

												
											),

										)
									)
								)
							)
						)
					)
				), // End Tab Box Page "Data Extraction Details"
				
				
				// =================================   TAB2 : FILTERS  ================================= //

				Tab Page Box(
					TitleTab2,
					Icon( "Filter" ), 
					
					Border Box( Left( 40 ), Top( 20 ),
						V List Box(
					
							// --------------------------------- ADD FILTER --------------------------------- //
							
							Outline Box( "Select filter ",
								Border Box( Top( 15 ), Bottom( 15 ),
									V List Box(
										H List Box(
											Border Box( Left( 11 ),
												Panel Box( "Selected tags", 
										
													V List Box(
											
														H List Box(
									
															Border Box( top( 2 ), Icon Box( "SearchIndex" ) ),
															Spacer Box( size( 5, 10 ) ), 
											
															Border Box( top( 2 ),
																txt_SearchBarFilter = Text Edit Box( "",
																	<<set width( 650 * RatioX ),
																	<<set text changed( f_SearchBarFilter )
																)
															),
															bttn_ResetSearchFilter = Button Box( "",
																<<set icon( "DebuggerDeleteBreakpoint" ),
																<<set script(
																	txt_SearchBarFilter << set text( "" );
																	f_SearchBarFilter( txt_SearchBarFilter, "" );
																),
																<<set tip( "Clear filter" ), 

															)
													
														), 
										
														Border Box( Left( 26 ),
															lstbox_SelectedTags2 = List Box(
																{},
																<<Set Size( 650 * RatioX, 272 * RatioY ),
																maxSelected( 1 )
															)
														)
													)
											
												)
											),
											Border Box( Top( 115 * RatioY ), Left( 40 ),
												V List Box(
													cbbox_FilterComparison = Combo Box(
														{"=", ">", "<", ">=", "<=", "Not Equal", "In", "Like", "Not Like"}, 
													
														Comparator = cbbox_FilterComparison << GetSelected();
														
														/* If the comparator "In" is selected, then user need to specify the separator to use for the list. We thus show the corresponding boxes in GUI to specify it */
														If( Comparator == "In",
															txt_sep << Visibility( "Visible" );
															txt_sep_edit << Visibility( "Visible" );
														,
															txt_sep_edit << Visibility( "Collapse" );
															txt_sep << Visibility( "Collapse" );
														);
													),
													Spacer Box( size( 10, 10 ) ),
													H List Box(
														txt_sep = Text Box( "Edit list separator: " ),
														Spacer Box( size( 10, 10 ) ),
														txt_sep_edit = Text Edit Box( "," )
													)
												)
											),
											Border Box( Left( 10 ),
												V List Box(
													Border Box( Top( 118 * RatioY ), Left( 30 ),
														txtFilter = Text Edit Box( "", <<Set Width( 180 ) )
													)
												
												)
											),
											V List Box(
												Border Box( Left( 40 ), Top( 118 * RatioY ),
													V List Box(
														Lineup Ruler Box(
															Widths( {200 * RatioX, 200 * RatioY} ),
															Lineup Box( N Col( 1 ),
																bttn_AddFilter = Button Box( "Add ", Eval( EXPR_ADD_FILTER ) ),
																Spacer Box( size( 10, 10 ) ),
																bttn_Preview = Button Box( "  Preview  ", Eval( EXPR_PREVIEW ) ),
																Spacer Box( size( 10, 10 ) ),
																bttn_Extraction2 = Button Box( "Run extraction", Eval( EXPR_DATA_EXTRACTION ) )
															)
														)
											
													)
												)
											
											)
										) 
								
									)
								), 

							), // End Outine box Add Filter
						
							// --------------------------------- NEST / REMOVE FILTER --------------------------------- //
						
							Border Box( Top( 20 ),
								outline_FiltersRegistered = Outline Box( "Filter selection",
									V List Box(
										Border Box( Left( 15 ), Top( 15 ),
											cb_filter_condition = Combo Box(
												{"If ALL conditions are met", "If ANY conditions are met"}, 
												
												/* If user changes the type of condition, then  we removed all NESTED filters, because they are build differently depending on condition's type */
												Filters_AA_KEYS = Filters_AA << Get Keys();
												Ind_to_remove = List();

												For( i = N Items( Filters_AA_KEYS ), i >= 1, i = i - 1,
													If( Is List( Filters_AA[i][1] ),
														Insert Into( Ind_to_remove, i );
														lstFiltersRegistered << Remove Item( i );
													)
												);
												Remove From( Filters_AA, Ind_to_remove );
												NextID = N Items( Filters_AA ) + 1;
											)
										),
										H List Box(
											Border Box( Left( 15 ), Top( 15 ),
												lstFiltersRegistered = List Box( {}, <<Set Size( 1052 * RatioX, 200 * RatioY ) )
											),
											Border Box( Left( 40 ), Top( 60 ),
												V List Box(
													Lineup Ruler Box(
														Widths( {120 * RatioX, 200 * RatioY} ),
														Lineup Box( N Col( 1 ),
															bttn_Nest = Button Box( "      Nest       ", 
															
																section = "FILTER";
																
																Try(
																	(lstFiltersRegistered << Get Selected)[1],
																	f_DialogError( "No filter selected" )
																);
																lst_FilterNested = lstFiltersRegistered << Get Selected;
																Indices_FilterNested = lstFiltersRegistered << Get Selected Indices;
																
																/* Check if 2 filters were selected */
																If( N Items( lst_FilterNested ) != 2,
																	f_DialogError( "Select 2 filters to nest" )
																);
																Filter1 = Filters_AA[Indices_FilterNested[1]];
																Filter2 = Filters_AA[Indices_FilterNested[2]];
																	
																/* Check if at least one of the selected filters is not already nested */
																If( Or( Is List( Filter1[1] ), Is List( Filter2[1] ) ),
																	f_DialogError( "Filter already nested" )
																);
																f_Log(
																	"INFO", "User nest the filters - " || Concat Items( lst_FilterNested, " AND " ),
																	section
																);
																
																/* Check if the nested filter does not already exists */
																Condition = Match( cb_filter_condition << Get(), 1, "OR", 2, "AND" );
																str_FilterConcat = "(" || Char( Filter1[1] ) || " " || Char( Filter1[3][1] ) || " "
																 || Char( Filter1[3][2] ) || ")  " || Condition || "  (" || Char( Filter2[1] ) || " "
																 || Char( Filter2[3][1] ) || " " || Char( Filter2[3][2] ) || ")";
																str_FilterConcat2 = "(" || Char( Filter2[1] ) || " " || Char( Filter2[3][1] ) || " "
																 || Char( Filter2[3][2] ) || ")  " || Condition || "  (" || Char( Filter1[1] ) || " "
																 || Char( Filter1[3][1] ) || " " || Char( Filter1[3][2] ) || ")";
																lst_Filters = lstFiltersRegistered << Get Items();
																If(
																	Or(
																		Contains( lst_Filters, str_FilterConcat ),
																		Contains( lst_Filters, str_FilterConcat2 )
																	),
																	f_DialogError( "Filter already exist" ), 
															
																/* If it does not already exists, we add it */
																	lstFiltersRegistered << Append( str_FilterConcat );
																	outline_FiltersRegistered << Close( 0 );
																);
														
														
															/* Create new filter with the 2 nested filters */
																Filters_AA = f_NestFilters( Filters_AA, Indices_FilterNested, NextID );
															
															/* Remove the  2 filters to add only 1 nested one */
																lstFiltersRegistered << Remove Selected;
																Filters_AA = f_ReorderAssociativeArray( Filters_AA, Indices_FilterNested );
																NextID = N Items( Filters_AA ) + 1;
															),
															Spacer Box( Size( 15, 15 ) ),
															bttn_RemoveFilter = Button Box( "   Remove    ", 
															
																section = "FILTER";

																Try(
																	(lstFiltersRegistered << Get Selected)[1],
																	f_DialogError( "No filter selected" )
																);
																lst_FilterRemoved = lstFiltersRegistered << Get Selected;
																f_Log(
																	"INFO",
																	"User removed the filter - " || Concat Items( lst_FilterRemoved, " AND " ),
																	section
																);
	
																/* Remove from list of filters in UI */
																ID_to_remove = lstFiltersRegistered << Get Selected Indices();
																lstFiltersRegistered << Remove Selected;
																Filters_AA = f_ReorderAssociativeArray( Filters_AA, ID_to_remove );
																NextID = N Items( Filters_AA ) + 1;
																
															),
															Spacer Box( Size( 15, 15 ) ),
															bttn_RemoveAllFilters = Button Box( " Remove all ",
																lstFiltersRegistered << Remove All;
																NextID = 1;
																Filters_AA = Associative Array();
																f_Log( "INFO", "User removed all filters", "FILTER" );

															)
														)
													)
												)
											)
										)
									)
								)// End Outine box Filters Registered
							)
						)
					
					)
					
					
				)// End Tab Box Page "Tab Add Extraction Filters"
					
			) // End Tab box
	
				
		),
		Spacer Box( Size( 15, 15 ) ),
		H Center Box( Text Box( "Version " || Char( Version ) ) )
	)
); // End GUI



/****************************************************


*                III. PARAMETERS


******************************************************/


// --------------------------------- SETTING AT START --------------------------------- //

/* Update screen size */
WinTag << Maximize Window( 1 );
NewWindowSize = WinTag << Get Window Size();
If( Or( NewWindowSize[1] != WindowSize[1], NewWindowSize[2] != WindowSize[2] ),
	f_Log( "INFO", "Update Window size, OLD - " || Char( WindowSize ) || " / NEW - " || Char( NewWindowSize ) );
	WindowSize = NewWindowSize;
	Save Text File( PathWindowSize, "WindowSize = " || Char( WindowSize ) );
	
);



/* Settings value */ 
PeriodValue << Set Minimum( 1 );

/* Hide/Unhide */
panel_ServerAdress << Visibility( "Collapse" );
PeriodPanel << Visibility( "Visible" );
txt_sep_edit << Visibility( "Collapse" );
txt_sep << Visibility( "Collapse" );
outline_FiltersRegistered << Close( 1 );

/* Initialize server selection */
lst_MES_servers << Append( AA.ServersInfo << get keys ); // Initialize the list box with the list of MES servers found in MES_servers_list.csv
lst_MES_servers << Set Selected( 1 ); // Select first row of the list (default)
f_UpdateMESInfo();  //Initialize the server details with the server informations of the first one in the data table


/* Recall server adress if it was edited in the last data extraction	*/
Try(
	f_Log( "INFO", "Last server selected by the user - " || Char( Recall.LastServerSelected ) );
	lst.sorted_tables = AA.ServersInfo << get keys;
	Remove From( lst.sorted_tables, Loc( lst.sorted_tables, Recall.LastServerSelected )[1] );
	Insert Into( lst.sorted_tables, Recall.LastServerSelected, 1 );
	lst_MES_servers << Remove All;
	lst_MES_servers << Append( lst.sorted_tables );
	lst_MES_servers << Set Selected( 1 );
	f_UpdateMESInfo();
	If( Recall.LastServerEdited == 1,
		txtbox_ServerAddress << set Text( Recall.MES );
		txtbox_ServerExtension << set Text( Recall.Extension );
		txtbox_Shortname << set text( Recall.ShortName );
		Match( Recall.ServerType, "IP21", rdbox_ServerType << set( 1 ), rdbox_ServerType << set( 2 ) );
		chkbox_edit_adress << set( 1 );
		panel_ServerAdress << Visibility( "Visible" );
	, 
		
	);
	
);

/* Initialize Start Time and End Time */
StartTime << Set Format( Format( "yyyy-mm-ddThh:mm:ss" ) ); // Set date format
EndTime << Set Format( Format( "yyyy-mm-ddThh:mm:ss" ) );
t_default_min = 10; //in minutes
t_default_s = t_default_min * 60; // in secondes
StartTime << set( Floor( Today() / t_default_s ) * t_default_s - 86400 ); // rounded date to 10 min
EndTime << set( Floor( Today() / t_default_s ) * t_default_s ); // rounded date to 10 min

// Sets periods to minutes in GUI by default
rdbox_PeriodUnits << Set( 2 );


// --------------------------------- BUTTONS STYLE--------------------------------- //

bttn_Round << Underline Style( 1 );
bttn_Now << Underline Style( 1 );
bttn_help << Underline Style( 1 );
bttn_AddTag << Set Icon( "Next" );
bttn_RemoveTag << Set Icon( "Prev" );
bttn_UpTag << Set Icon( "ListItemUp" );
bttn_DownTag << Set Icon( "ListItemDown" );
bttn_Extraction << Set Icon( "DebuggerRunWithoutBreakpoints" );
bttn_Extraction2 << Set Icon( "DebuggerRunWithoutBreakpoints" );

